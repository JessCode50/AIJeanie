<!-- src/App.vue -->
<template>
  <div class="app">
    <!-- Global Header -->
    <AppHeader 
      :title="getViewTitle()"
      :subtitle="getViewSubtitle()"
      :icon="getViewIcon()"
      :current-view="view"
      :search-query="searchQuery"
      :notifications="notifications"
      :show-notifications="showNotifications"
      :refresh-loading="dashboardLoading"
      :data-status="realDataLoaded ? '• Live Data' : '• Sample Data'"
      @view-change="handleViewChange"
      @search="handleSearch"
      @toggle-notifications="showNotifications = !showNotifications"
      @refresh="loadRealDashboardData"
    />

    <!-- Main Content Views -->
    <div class="app-content">
      <!-- Dashboard View -->
      <DashboardView 
        v-if="view === 'dashboard'"
        :quick-actions="quickActions"
        :tickets="tickets"
        :server-stats="serverStats"
        :activities="recentActivities"
        :loading="dashboardLoading"
        @view-change="handleViewChange"
        @quick-action="executeQuickAction"
      />
    
    <!-- Enhanced Header with Navigation -->
    <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-bottom: 1px solid rgba(226, 232, 240, 0.8); padding: 16px 32px; display: flex; justify-content: space-between; align-items: center; box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 1px 2px rgba(0,0,0,0.06);">
      
      <div style="display: flex; align-items: center; gap: 24px;">
        <div style="display: flex; align-items: center; gap: 16px;">
          <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); border-radius: 12px; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);">
            <span style="font-size: 18px; color: white;">🏠</span>
          </div>
          <div>
            <h1 style="margin: 0; font-size: 24px; font-weight: 700; color: #0f172a; letter-spacing: -0.025em;">Admin Dashboard</h1>
            <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">Hosting & Client Management</p>
          </div>
        </div>
        
        <!-- Navigation Menu -->
        <nav style="display: flex; gap: 8px;">
          <button @click="view = 'tickets'" style="background: rgba(59, 130, 246, 0.1); color: #3b82f6; border: 1px solid rgba(59, 130, 246, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 600;">🎫 Tickets</button>
          <button @click="view = 'clients'" style="background: rgba(16, 185, 129, 0.1); color: #059669; border: 1px solid rgba(16, 185, 129, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 600;">👥 Clients</button>
          <button @click="view = 'hosting'" style="background: rgba(139, 92, 246, 0.1); color: #8b5cf6; border: 1px solid rgba(139, 92, 246, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 600;">🏠 Hosting</button>
          <button @click="view = 'servers'" style="background: rgba(139, 92, 246, 0.1); color: #8b5cf6; border: 1px solid rgba(139, 92, 246, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 600;">🖥️ Servers</button>
          <button @click="view = 'AI'" style="background: rgba(245, 158, 11, 0.1); color: #d97706; border: 1px solid rgba(245, 158, 11, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 600;">🤖 AI Assistant</button>
        </nav>
      </div>
      
      <div style="display: flex; align-items: center; gap: 16px;">
        <!-- Search Bar -->
        <div style="position: relative;">
          <input 
            v-model="searchQuery" 
            placeholder="Search tickets, clients, domains..." 
            style="width: 280px; padding: 10px 40px 10px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; background: rgba(255,255,255,0.9);" 
            @keydown="handleSearchKeydown"
            @focus="this.style.borderColor='#3b82f6'; this.style.boxShadow='0 0 0 3px rgba(59,130,246,0.1)'"
            @blur="this.style.borderColor='rgba(209, 213, 219, 0.8)'; this.style.boxShadow='none'"
          />
          <span style="position: absolute; right: 12px; top: 50%; transform: translateY(-50%); color: #6b7280; font-size: 16px;">🔍</span>
        </div>
        
        <!-- Notifications -->
        <div style="position: relative; cursor: pointer;" @click="showNotifications = !showNotifications">
          <div style="width: 40px; height: 40px; background: rgba(239, 68, 68, 0.1); border: 1px solid rgba(239, 68, 68, 0.2); border-radius: 10px; display: flex; align-items: center; justify-content: center; position: relative;">
            <span style="font-size: 16px; color: #dc2626;">🔔</span>
            <div v-if="notifications.length > 0" style="position: absolute; top: -4px; right: -4px; width: 16px; height: 16px; background: #dc2626; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 10px; color: white; font-weight: 700;">{{ notifications.length }}</div>
          </div>
        </div>
        
        <!-- Refresh Button -->
        <button 
          @click="loadRealDashboardData" 
          :disabled="dashboardLoading"
          style="background: rgba(16, 185, 129, 0.1); color: #059669; border: 1px solid rgba(16, 185, 129, 0.2); border-radius: 10px; padding: 10px; cursor: pointer; transition: all 0.2s ease; display: flex; align-items: center; justify-content: center;"
          :style="{ opacity: dashboardLoading ? '0.6' : '1', cursor: dashboardLoading ? 'not-allowed' : 'pointer' }"
          @mouseover="if (!dashboardLoading) { this.style.background='rgba(16, 185, 129, 0.15)'; this.style.transform='translateY(-1px)'; }"
          @mouseout="this.style.background='rgba(16, 185, 129, 0.1)'; this.style.transform='translateY(0)';"
        >
          <span v-if="dashboardLoading" style="font-size: 16px; animation: spin 1s linear infinite;">⟳</span>
          <span v-else style="font-size: 16px;">🔄</span>
        </button>
        
        <!-- User Profile -->
        <div style="display: flex; align-items: center; gap: 12px; background: rgba(71, 85, 105, 0.1); padding: 8px 16px; border-radius: 12px; cursor: pointer;">
          <div style="width: 32px; height: 32px; background: linear-gradient(135deg, #6b7280, #4b5563); border-radius: 8px; display: flex; align-items: center; justify-content: center;">
            <span style="color: white; font-size: 14px; font-weight: 700;">A</span>
          </div>
          <div style="text-align: left;">
            <div style="font-size: 12px; font-weight: 600; color: #0f172a;">Admin User</div>
            <div style="font-size: 10px; color: #64748b;">Administrator {{ realDataLoaded ? '• Live Data' : '• Sample Data' }}</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Quick Actions Bar -->
    <div style="padding: 20px 32px; background: rgba(255, 255, 255, 0.6); border-bottom: 1px solid rgba(226, 232, 240, 0.5);">
      <div style="display: flex; gap: 12px; align-items: center;">
        <h3 style="margin: 0; font-size: 14px; font-weight: 700; color: #64748b; text-transform: uppercase; letter-spacing: 0.05em;">Quick Actions</h3>
        <div style="flex: 1; display: flex; gap: 8px; flex-wrap: wrap;">
          <button 
            v-for="action in quickActions" 
            :key="action.id"
            @click="executeQuickAction(action.id)"
            :style="`background: ${action.color}15; color: ${action.color}; border: 1px solid ${action.color}25; border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 600; display: flex; align-items: center; gap: 6px;`"
            @mouseover="`this.style.background='${action.color}25'; this.style.transform='translateY(-1px)';`"
            @mouseout="`this.style.background='${action.color}15'; this.style.transform='translateY(0)';`"
          >
            <span>{{ action.icon }}</span>
            {{ action.label }}
          </button>
        </div>
      </div>
    </div>

    <!-- Dashboard Content -->
    <div style="padding: 32px; display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 32px;">
      
      <!-- Widget: Recent Tickets -->
      <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        <div style="padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6); display: flex; align-items: center; justify-content: space-between;">
          <div>
            <h3 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a;">Recent Tickets</h3>
            <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">Latest support requests</p>
          </div>
          <button @click="view = 'tickets'" style="background: linear-gradient(135deg, #3b82f6, #1e40af); color: white; border: none; border-radius: 8px; padding: 8px 16px; font-size: 12px; font-weight: 600; cursor: pointer;">View All</button>
        </div>
        <div style="padding: 24px 28px; max-height: 300px; overflow-y: auto;">
          <div v-if="tickets.length === 0" style="text-align: center; color: #64748b; padding: 20px;">
            <span style="font-size: 32px; margin-bottom: 12px; display: block;">🎫</span>
            <p>No recent tickets</p>
          </div>
          <div v-for="ticket in tickets.slice(0, 5)" :key="ticket.id" style="display: flex; align-items: center; gap: 12px; padding: 12px 0; border-bottom: 1px solid rgba(226, 232, 240, 0.4); cursor: pointer;" @click="viewTicket(ticket)">
            <div style="width: 8px; height: 8px; border-radius: 50%; background: #3b82f6;"></div>
            <div style="flex: 1;">
              <div style="font-weight: 600; color: #0f172a; font-size: 14px; margin-bottom: 2px;">{{ ticket.subject || 'Untitled Ticket' }}</div>
              <div style="font-size: 12px; color: #64748b;">{{ ticket.client || 'Unknown Client' }} • {{ ticket.created || 'Just now' }}</div>
            </div>
            <div style="background: rgba(239, 68, 68, 0.1); color: #dc2626; padding: 4px 8px; border-radius: 6px; font-size: 10px; font-weight: 700;">{{ ticket.priority || 'Medium' }}</div>
          </div>
        </div>
      </div>

      <!-- Widget: System Overview -->
      <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        <div style="padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6);">
          <h3 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a;">System Status</h3>
          <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">Server health overview</p>
        </div>
        <div style="padding: 24px 28px;">
          <div style="display: grid; gap: 16px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <span style="color: #64748b; font-size: 13px; font-weight: 600;">Server Load</span>
              <div style="display: flex; align-items: center; gap: 8px;">
                <div style="width: 60px; height: 4px; background: rgba(226, 232, 240, 0.5); border-radius: 2px; overflow: hidden;">
                  <div :style="`height: 100%; background: linear-gradient(90deg, #10b981, #059669); width: ${serverStats.cpuUsage}%; border-radius: 2px;`"></div>
                </div>
                <span style="color: #10b981; font-size: 12px; font-weight: 700;">{{ serverStats.cpuUsage }}%</span>
              </div>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <span style="color: #64748b; font-size: 13px; font-weight: 600;">Memory Usage</span>
              <div style="display: flex; align-items: center; gap: 8px;">
                <div style="width: 60px; height: 4px; background: rgba(226, 232, 240, 0.5); border-radius: 2px; overflow: hidden;">
                  <div :style="`height: 100%; background: linear-gradient(90deg, #f59e0b, #d97706); width: ${serverStats.memoryUsage}%; border-radius: 2px;`"></div>
                </div>
                <span style="color: #f59e0b; font-size: 12px; font-weight: 700;">{{ serverStats.memoryUsage }}%</span>
              </div>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <span style="color: #64748b; font-size: 13px; font-weight: 600;">Disk Space</span>
              <div style="display: flex; align-items: center; gap: 8px;">
                <div style="width: 60px; height: 4px; background: rgba(226, 232, 240, 0.5); border-radius: 2px; overflow: hidden;">
                  <div :style="`height: 100%; background: linear-gradient(90deg, #10b981, #059669); width: ${serverStats.diskUsage}%; border-radius: 2px;`"></div>
                </div>
                <span style="color: #10b981; font-size: 12px; font-weight: 700;">{{ serverStats.diskUsage }}%</span>
              </div>
            </div>
            <div style="margin-top: 16px; padding-top: 16px; border-top: 1px solid rgba(226, 232, 240, 0.6);">
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; text-align: center;">
                <div>
                  <div style="font-size: 20px; font-weight: 800; color: #10b981; margin-bottom: 4px;">{{ cpanelAccounts.length || 24 }}</div>
                  <div style="font-size: 11px; color: #64748b; font-weight: 600; text-transform: uppercase;">Accounts</div>
                </div>
                <div>
                  <div style="font-size: 20px; font-weight: 800; color: #3b82f6; margin-bottom: 4px;">99.9%</div>
                  <div style="font-size: 11px; color: #64748b; font-weight: 600; text-transform: uppercase;">Uptime</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Widget: Revenue Overview -->
      <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        <div style="padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6);">
          <h3 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a;">Revenue</h3>
          <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">Monthly financial overview</p>
        </div>
        <div style="padding: 24px 28px;">
          <div style="text-align: center; margin-bottom: 20px;">
            <div style="font-size: 36px; font-weight: 800; color: #10b981; margin-bottom: 8px;">${{ formatCurrency(revenueData.totalRevenue).replace('$', '') }}</div>
            <div style="font-size: 12px; color: #64748b; font-weight: 600;">This Month</div>
            <div style="display: flex; align-items: center; justify-content: center; gap: 6px; margin-top: 8px;">
              <span style="color: #10b981; font-size: 12px;">↗️</span>
              <span style="color: #10b981; font-size: 12px; font-weight: 600;">+{{ revenueData.monthlyGrowth }}% from last month</span>
            </div>
          </div>
          <div style="display: grid; gap: 12px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <span style="color: #64748b; font-size: 13px; font-weight: 600;">Paid Invoices</span>
              <span style="color: #10b981; font-size: 14px; font-weight: 700;">{{ formatCurrency(revenueData.paidInvoices) }}</span>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <span style="color: #64748b; font-size: 13px; font-weight: 600;">Pending</span>
              <span style="color: #f59e0b; font-size: 14px; font-weight: 700;">{{ formatCurrency(revenueData.pendingInvoices) }}</span>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <span style="color: #64748b; font-size: 13px; font-weight: 600;">Overdue</span>
              <span style="color: #dc2626; font-size: 14px; font-weight: 700;">{{ formatCurrency(revenueData.overdueInvoices) }}</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Recent Activities -->
    <div style="padding: 0 32px 32px;">
      <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        <div style="padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6);">
          <h3 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a;">Recent Activities</h3>
          <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">Latest system activities and user actions</p>
        </div>
        <div style="padding: 24px 28px;">
          <div v-if="recentActivities.length === 0" style="text-align: center; color: #64748b; padding: 20px;">
            <span style="font-size: 32px; margin-bottom: 12px; display: block;">📋</span>
            <p>No recent activities</p>
          </div>
          <div v-else style="display: grid; gap: 16px;">
            <div v-for="activity in recentActivities.slice(0, 5)" :key="activity.id" style="display: flex; align-items: center; gap: 16px;">
              <div :style="`width: 32px; height: 32px; background: linear-gradient(135deg, ${getActivityColor(activity.type)}, ${getActivityColorDark(activity.type)}); border-radius: 8px; display: flex; align-items: center; justify-content: center;`">
                <span style="color: white; font-size: 14px;">{{ activity.icon || '📋' }}</span>
              </div>
              <div style="flex: 1;">
                <div style="font-weight: 600; color: #0f172a; font-size: 14px; margin-bottom: 2px;">{{ activity.title }}</div>
                <div style="font-size: 12px; color: #64748b;">{{ activity.description }} • {{ activity.time }}</div>
              </div>
              <div :style="`background: ${getActivityBadgeColor(activity.priority)}; color: ${getActivityTextColor(activity.priority)}; padding: 4px 8px; border-radius: 6px; font-size: 10px; font-weight: 700;`">{{ activity.priority }}</div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Navigation Footer -->
    <div style="padding: 24px 32px; display: flex; gap: 20px; justify-content: center;">
      <button @click="view = 'AI'" style="background: linear-gradient(135deg, #6b7280, #4b5563); color: white; border: none; border-radius: 12px; padding: 14px 28px; font-weight: 700; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(107,114,128,0.4); display: flex; align-items: center; gap: 8px;">
        <span>🤖</span>
        <span>AI Assistant</span>
      </button>
    </div>
  </div>



  <div v-else-if="view === 'AI'" style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; min-height: 100vh; height: 100vh; width: 100vw; margin: 0; padding: 0; position: fixed; top: 0; left: 0; overflow-y: auto;">
<!-- Header -->
    <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-bottom: 1px solid rgba(226, 232, 240, 0.8); padding: 16px 32px; display: flex; justify-content: space-between; align-items: center; box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 1px 2px rgba(0,0,0,0.06);">
      <div style="display: flex; align-items: center; gap: 20px;">
        <div style="display: flex; align-items: center; gap: 16px;">
          <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); border-radius: 12px; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);">
            <span style="font-size: 18px; color: white;">🤖</span>
  </div>
          <div>
            <h1 style="margin: 0; font-size: 24px; font-weight: 700; color: #0f172a; letter-spacing: -0.025em;">Agent Dashboard</h1>
            <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">AI-Powered Customer Support</p>
          </div>
        </div>
        <div style="background: linear-gradient(135deg, #10b981, #059669); color: white; padding: 6px 16px; border-radius: 24px; font-size: 11px; font-weight: 600; letter-spacing: 0.025em; box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);">ACTIVE SESSION</div>
      </div>
      <div style="display: flex; align-items: center; gap: 24px;">
        <div style="display: flex; align-items: center; gap: 12px; background: rgba(16, 185, 129, 0.1); padding: 10px 18px; border-radius: 12px; border: 1px solid rgba(16, 185, 129, 0.2);">
          <div style="width: 8px; height: 8px; background: #10b981; border-radius: 50%; animation: pulse 2s infinite;"></div>
          <span style="color: #047857; font-weight: 600; font-size: 13px;">System Online</span>
        </div>
        <button style="background: rgba(71, 85, 105, 0.1); border: 1px solid rgba(71, 85, 105, 0.2); color: #475569; font-size: 16px; cursor: pointer; padding: 10px; border-radius: 10px; transition: all 0.2s ease;" @mouseover="this.style.background='rgba(71, 85, 105, 0.15)'" @mouseout="this.style.background='rgba(71, 85, 105, 0.1)'">⚙️</button>
  </div>
</div>

    <!-- Main Content Container -->
    <div style="padding: 32px; display: flex; gap: 32px; height: calc(100vh - 340px); overflow: hidden;">
      <!-- Left Column - Agent Chat -->
      <div style="flex: 1; display: flex; flex-direction: column; min-width: 0;">
        <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); display: flex; flex-direction: column; flex: 1; border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
          <!-- Agent Chat Header -->
          <div style="display: flex; align-items: center; gap: 16px; padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6); flex-shrink: 0;">
            <div style="width: 32px; height: 32px; background: linear-gradient(135deg, #3b82f6, #1e40af); border-radius: 8px; display: flex; align-items: center; justify-content: center; box-shadow: 0 3px 8px rgba(59, 130, 246, 0.3);">
              <span style="color: white; font-size: 16px;">💬</span>
            </div>
            <div style="flex: 1;">
              <h2 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a;">AI Assistant</h2>
              <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">Ready to help with support requests</p>
            </div>
            <div style="background: rgba(59, 130, 246, 0.1); color: #3b82f6; padding: 6px 14px; border-radius: 20px; font-size: 11px; font-weight: 700; border: 1px solid rgba(59, 130, 246, 0.2);">READY</div>
          </div>

          <!-- Priority and Category Display -->
          <div v-if="priority" style="padding: 20px 28px; background: linear-gradient(90deg, rgba(245, 158, 11, 0.08), rgba(245, 158, 11, 0.03)); border-bottom: 1px solid rgba(245, 158, 11, 0.15); flex-shrink: 0;">
            <div style="display: flex; gap: 12px; align-items: center;">
              <span style="background: linear-gradient(135deg, #f59e0b, #d97706); color: white; padding: 8px 16px; border-radius: 12px; font-size: 12px; font-weight: 700; box-shadow: 0 3px 8px rgba(245,158,11,0.3);">
                ⚠️ Priority: {{ priority }}
              </span>
              <span style="background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white; padding: 8px 16px; border-radius: 12px; font-size: 12px; font-weight: 700; box-shadow: 0 3px 8px rgba(139,92,246,0.3);">
                📁 Website Issues
              </span>
            </div>
          </div>

          <!-- Chat Messages Area -->
          <div style="flex: 1; padding: 28px; overflow-y: auto; display: flex; flex-direction: column; gap: 20px; background: linear-gradient(135deg, rgba(248, 250, 252, 0.8), rgba(241, 245, 249, 0.4)); min-height: 0;">
            <!-- Welcome message when no chat -->
            <div v-if="aiResponse.length === 0 && !loading" style="display: flex; align-items: center; justify-content: center; height: 100%; flex-direction: column; color: #64748b;">
              <div style="width: 80px; height: 80px; background: linear-gradient(135deg, #e2e8f0, #cbd5e1); border-radius: 24px; display: flex; align-items: center; justify-content: center; margin-bottom: 24px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                <span style="font-size: 32px; color: #64748b;">🤖</span>
              </div>
              <div style="font-size: 20px; font-weight: 700; margin-bottom: 12px; color: #1e293b;">AI Assistant Ready</div>
              <div style="font-size: 15px; color: #64748b; text-align: center; max-width: 360px; line-height: 1.6; margin-bottom: 24px;">Start a conversation or submit a ticket ID to begin your support session</div>
              <div style="display: flex; gap: 12px; flex-wrap: wrap;">
                <div style="background: rgba(59, 130, 246, 0.1); color: #3b82f6; padding: 8px 16px; border-radius: 12px; font-size: 12px; font-weight: 600; border: 1px solid rgba(59, 130, 246, 0.2);">Server Support</div>
                <div style="background: rgba(16, 185, 129, 0.1); color: #059669; padding: 8px 16px; border-radius: 12px; font-size: 12px; font-weight: 600; border: 1px solid rgba(16, 185, 129, 0.2);">Ticket Lookup</div>
                <div style="background: rgba(139, 92, 246, 0.1); color: #8b5cf6; padding: 8px 16px; border-radius: 12px; font-size: 12px; font-weight: 600; border: 1px solid rgba(139, 92, 246, 0.2);">Issue Resolution</div>
              </div>
            </div>

            <!-- Dynamic AI Responses with enhanced styling -->
  <template v-for="(resp, index) in aiResponse" :key="index">
              <div v-if="shouldShow(resp)" :style="getProfessionalChatStyle(resp)" class="message-bubble">
                <div class="message-content">
                  <div class="message-text" v-html="formatApiResponse(resp)"></div>
                  <div class="message-time">{{ getMessageTime() }}</div>
                </div>
              </div>
</template>

            <!-- Enhanced Loading indicator with typing animation -->
            <div v-if="loading" style="display: flex; align-items: center; justify-content: flex-start; padding: 20px 0;">
              <div style="display: flex; align-items: center; gap: 16px; background: rgba(59, 130, 246, 0.1); padding: 20px 24px; border-radius: 16px; max-width: 80%; border: 1px solid rgba(59, 130, 246, 0.2); box-shadow: 0 4px 12px rgba(59, 130, 246, 0.1);">
                <div class="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
                <span style="color: #3b82f6; font-size: 14px; font-weight: 600;">Processing{{ dots }}</span>
              </div>
            </div>

            <!-- Auto-scroll helper -->
            <div ref="chatBottom"></div>
</div>

          <!-- Enhanced Chat Input Area -->
          <div style="padding: 20px 24px; border-top: 1px solid rgba(229, 231, 235, 0.8); background: rgba(255,255,255,0.95); flex-shrink: 0;">
            <!-- Input suggestions when empty -->
            <div v-if="!userMessage.trim() && aiResponse.length === 0" style="margin-bottom: 12px;">
              <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                <button @click="userMessage = 'Can you help me troubleshoot server connectivity issues?'" style="background: rgba(37, 99, 235, 0.1); color: #2563eb; border: 1px solid rgba(37, 99, 235, 0.2); border-radius: 6px; padding: 6px 12px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;">Server Issues</button>
                <button @click="userMessage = 'What are the current system performance metrics?'" style="background: rgba(16, 185, 129, 0.1); color: #059669; border: 1px solid rgba(16, 185, 129, 0.2); border-radius: 6px; padding: 6px 12px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;">Performance</button>
                <button @click="userMessage = 'I need assistance with user account management'" style="background: rgba(245, 158, 11, 0.1); color: #d97706; border: 1px solid rgba(245, 158, 11, 0.2); border-radius: 6px; padding: 6px 12px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;">Account Help</button>
              </div>
            </div>

            <div style="display: flex; gap: 12px; margin-bottom: 16px; position: relative;">
              <div style="flex: 1; position: relative;">
    <textarea
      v-model="userMessage"
                  placeholder="Type your message... (Shift+Enter for new line)"
                  style="flex: 1; min-height: 44px; max-height: 120px; padding: 14px 16px; border: 2px solid rgba(209, 213, 219, 0.8); border-radius: 8px; resize: vertical; font-family: inherit; font-size: 14px; transition: all 0.2s ease; background: rgba(255,255,255,0.98); width: 100%; box-sizing: border-box;"
                  @focus="this.style.borderColor='#2563eb'; this.style.boxShadow='0 0 0 3px rgba(37,99,235,0.1)'"
                  @blur="this.style.borderColor='rgba(209, 213, 219, 0.8)'; this.style.boxShadow='none'"
                  @keydown="handleKeydown"
    ></textarea>
                <div v-if="userMessage.length > 0" style="position: absolute; bottom: 8px; right: 12px; font-size: 10px; color: #9ca3af; background: rgba(255,255,255,0.9); padding: 2px 6px; border-radius: 4px;">
                  {{ userMessage.length }}/500
    </div>
  </div>
              <button 
                @click="aiClick"
                :disabled="!userMessage.trim() || loading"
                style="background: linear-gradient(45deg, #2563eb, #1d4ed8); color: white; border: none; border-radius: 8px; padding: 14px 20px; cursor: pointer; display: flex; align-items: center; justify-content: center; transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(37,99,235,0.3); font-weight: 600; min-width: 80px;"
                :style="{ opacity: (!userMessage.trim() || loading) ? '0.6' : '1', cursor: (!userMessage.trim() || loading) ? 'not-allowed' : 'pointer' }"
                @mouseover="if (userMessage.trim() && !loading) { this.style.transform='translateY(-1px)'; this.style.boxShadow='0 4px 12px rgba(37,99,235,0.4)' }"
                @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 8px rgba(37,99,235,0.3)'"
              >
                <span v-if="loading">⏳</span>
                <span v-else>Send →</span>
              </button>
            </div>

            <!-- Enhanced action buttons with icons -->
            <div style="display: flex; gap: 12px; align-items: center; justify-content: space-between;">
              <div style="display: flex; gap: 8px;">
                <button @click="aiClear" style="background: rgba(239, 68, 68, 0.1); color: #dc2626; border: 1px solid rgba(239, 68, 68, 0.2); border-radius: 6px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;">Clear</button>
                <button @click="view = 'clientInput'" style="background: rgba(124, 58, 237, 0.1); color: #7c3aed; border: 1px solid rgba(124, 58, 237, 0.2); border-radius: 6px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;">Client Info</button>
                <button @click="exportChat" style="background: rgba(16, 185, 129, 0.1); color: #059669; border: 1px solid rgba(16, 185, 129, 0.2); border-radius: 6px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;">Export</button>
                <button @click="testFunctionDetection" style="background: rgba(245, 158, 11, 0.1); color: #d97706; border: 1px solid rgba(245, 158, 11, 0.2); border-radius: 6px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;">Test 🧪</button>
                <button @click="debugCurrentResponse" style="background: rgba(139, 92, 246, 0.1); color: #8b5cf6; border: 1px solid rgba(139, 92, 246, 0.2); border-radius: 6px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;">Debug 🔍</button>
                <button @click="testDiskUsageAPI" style="background: rgba(59, 130, 246, 0.1); color: #3b82f6; border: 1px solid rgba(59, 130, 246, 0.2); border-radius: 6px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;">API Test 📡</button>
              </div>
              
              <!-- Message count and status -->
              <div style="display: flex; align-items: center; gap: 8px; font-size: 12px; color: #6b7280;">
                <span>{{ aiResponse.filter(shouldShow).length }} messages</span>
                <div style="width: 6px; height: 6px; background: #10b981; border-radius: 50%; animation: pulse 2s infinite;"></div>
                <span>Connected</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Right Column - Action Queue -->
      <div style="flex: 1; display: flex; flex-direction: column;">
        <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); display: flex; flex-direction: column; flex: 1; border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
          <!-- Action Queue Header -->
          <div style="display: flex; align-items: center; gap: 16px; padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6); flex-shrink: 0;">
            <div v-if="pending_functions.length > 0" style="width: 32px; height: 32px; background: linear-gradient(135deg, #ef4444, #dc2626); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 14px; font-weight: 700; box-shadow: 0 3px 8px rgba(239,68,68,0.4); animation: pulse 2s infinite;">{{ pending_functions.length }}</div>
            <div v-else style="width: 32px; height: 32px; background: linear-gradient(135deg, #71717a, #52525b); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-size: 14px; font-weight: 700; box-shadow: 0 3px 8px rgba(113,113,122,0.3);">0</div>
            <div style="flex: 1;">
              <h2 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a;">Action Queue</h2>
              <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">Pending system requests</p>
            </div>
            <div v-if="pending_functions.length > 0" style="background: linear-gradient(135deg, #ef4444, #dc2626); color: white; padding: 6px 14px; border-radius: 20px; font-size: 11px; font-weight: 700; box-shadow: 0 2px 8px rgba(239,68,68,0.3);">{{ pending_functions.length }} PENDING</div>
            <div v-else style="background: rgba(113, 113, 122, 0.1); color: #71717a; padding: 6px 14px; border-radius: 20px; font-size: 11px; font-weight: 700; border: 1px solid rgba(113, 113, 122, 0.2);">CLEAR</div>
          </div>

          <!-- Action Queue Items -->
          <div style="flex: 1; padding: 28px; overflow-y: auto; background: linear-gradient(135deg, rgba(248, 250, 252, 0.8), rgba(241, 245, 249, 0.4)); min-height: 0;">
            <!-- Show message when no pending functions -->
            <div v-if="pending_functions.length === 0" style="display: flex; align-items: center; justify-content: center; height: 100%; flex-direction: column; color: #64748b;">
              <div style="width: 64px; height: 64px; background: linear-gradient(135deg, #e2e8f0, #cbd5e1); border-radius: 20px; display: flex; align-items: center; justify-content: center; margin-bottom: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
                <span style="font-size: 24px; color: #64748b;">✅</span>
              </div>
              <div style="font-size: 18px; font-weight: 700; margin-bottom: 8px; color: #1e293b;">Queue Clear</div>
              <div style="font-size: 14px; color: #64748b;">No pending actions</div>
            </div>

            <!-- Dynamic pending functions -->
            <div v-for="(func, index) in pending_functions" :key="index" style="background: rgba(255, 255, 255, 0.9); border: 1px solid rgba(226, 232, 240, 0.6); border-radius: 12px; padding: 24px; margin-bottom: 20px; box-shadow: 0 4px 12px rgba(0,0,0,0.08), 0 2px 4px rgba(0,0,0,0.04); transition: all 0.2s ease;" @mouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 20px rgba(0,0,0,0.12), 0 4px 8px rgba(0,0,0,0.06)'" @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.08), 0 2px 4px rgba(0,0,0,0.04)'">
              <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px;">
                <h3 style="margin: 0; font-size: 16px; font-weight: 700; color: #0f172a; display: flex; align-items: center; gap: 12px;">
                  <span style="font-size: 16px;">⚡</span>
      {{ func.functionName }}
                </h3>
                <div :style="func.tag === 'Information Request' ? 'background: linear-gradient(135deg, #3b82f6, #1e40af); color: white; padding: 6px 12px; border-radius: 12px; font-size: 10px; font-weight: 700; box-shadow: 0 2px 6px rgba(59,130,246,0.3);' : 'background: linear-gradient(135deg, #f59e0b, #d97706); color: white; padding: 6px 12px; border-radius: 12px; font-size: 10px; font-weight: 700; box-shadow: 0 2px 6px rgba(245,158,11,0.3);'">
                  {{ func.tag || 'Information Request' }}
    </div>
              </div>
              <p style="margin: 0 0 20px 0; font-size: 14px; color: #475569; line-height: 1.6;">
      {{ func.description }}
    </p>
              <div style="display: flex; justify-content: space-between; align-items: center;">
                <span style="font-size: 12px; color: #94a3b8; display: flex; align-items: center; gap: 6px;">
                  <span style="font-size: 12px;">🕐</span>
                  {{ new Date().toLocaleTimeString() }}
                </span>
                <div style="display: flex; gap: 12px;">
                  <button @click="aiReject(index)" style="background: linear-gradient(135deg, #ef4444, #dc2626); color: white; border: none; border-radius: 10px; padding: 10px 20px; font-size: 12px; font-weight: 700; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 3px 8px rgba(239,68,68,0.3);" @mouseover="this.style.transform='translateY(-1px)'; this.style.boxShadow='0 4px 12px rgba(239,68,68,0.4)'" @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 3px 8px rgba(239,68,68,0.3)'">Reject</button>
                  <button @click="aiProceed(index)" style="background: linear-gradient(135deg, #10b981, #059669); color: white; border: none; border-radius: 10px; padding: 10px 20px; font-size: 12px; font-weight: 700; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 3px 8px rgba(16,185,129,0.3);" @mouseover="this.style.transform='translateY(-1px)'; this.style.boxShadow='0 4px 12px rgba(16,185,129,0.4)'" @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 3px 8px rgba(16,185,129,0.3)'">Proceed</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Bottom Stats Section -->
    <div style="padding: 0 32px 24px; display: flex; gap: 32px;">
      <!-- Quick Ticket -->
      <div style="flex: 1; background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); padding: 28px; border: 1px solid rgba(226,232,240,0.5);">
        <h3 style="margin: 0 0 24px 0; font-size: 18px; font-weight: 700; color: #0f172a; display: flex; align-items: center; justify-content: space-between;">
          <div style="display: flex; align-items: center; gap: 16px;">
            <div style="width: 32px; height: 32px; background: linear-gradient(135deg, #10b981, #059669); border-radius: 8px; display: flex; align-items: center; justify-content: center; box-shadow: 0 3px 8px rgba(16, 185, 129, 0.3);">
              <span style="font-size: 16px; color: white;">🎫</span>
            </div>
            <div>
              <div style="font-size: 18px; font-weight: 700; color: #0f172a;">Quick Ticket</div>
              <div style="font-size: 13px; color: #64748b; font-weight: 500;">Submit or lookup tickets</div>
            </div>
          </div>
          <!-- Mode toggle buttons -->
          <div style="display: flex; gap: 4px; background: rgba(248, 250, 252, 0.8); padding: 4px; border-radius: 12px; border: 1px solid rgba(226, 232, 240, 0.8);">
      <button
              @click="ticketMode = 'submit'" 
              :style="{ 
                background: ticketMode === 'submit' ? 'linear-gradient(135deg, #10b981, #059669)' : 'transparent', 
                color: ticketMode === 'submit' ? 'white' : '#64748b', 
                border: 'none', 
                padding: '8px 16px', 
                borderRadius: '8px', 
                fontSize: '12px', 
                fontWeight: '700', 
                cursor: 'pointer', 
                transition: 'all 0.2s ease',
                boxShadow: ticketMode === 'submit' ? '0 2px 6px rgba(16,185,129,0.3)' : 'none'
              }"
            >
              Submit
      </button>
            <button 
              @click="ticketMode = 'lookup'" 
              :style="{ 
                background: ticketMode === 'lookup' ? 'linear-gradient(135deg, #3b82f6, #1e40af)' : 'transparent', 
                color: ticketMode === 'lookup' ? 'white' : '#64748b', 
                border: 'none', 
                padding: '8px 16px', 
                borderRadius: '8px', 
                fontSize: '12px', 
                fontWeight: '700', 
                cursor: 'pointer', 
                transition: 'all 0.2s ease',
                boxShadow: ticketMode === 'lookup' ? '0 2px 6px rgba(59,130,246,0.3)' : 'none'
              }"
            >
              Lookup
            </button>
          </div>
        </h3>

        <!-- Submit Mode -->
        <div v-if="ticketMode === 'submit'">
          <div style="display: flex; gap: 12px;">
            <input
              v-model="ticketIdInput"
              placeholder="Enter Ticket ID"
              style="flex: 1; padding: 14px 16px; border: 2px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; transition: all 0.2s ease; background: rgba(255,255,255,0.95);"
              @focus="this.style.borderColor='#059669'; this.style.boxShadow='0 0 0 3px rgba(5,150,105,0.1)'"
              @blur="this.style.borderColor='rgba(209, 213, 219, 0.8)'; this.style.boxShadow='none'"
            />
      <button
              @click="submitTicketId"
              style="background: linear-gradient(45deg, #059669, #047857); color: white; border: none; border-radius: 8px; padding: 14px 24px; font-weight: 600; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(5,150,105,0.3);"
              @mouseover="this.style.transform='translateY(-1px)'; this.style.boxShadow='0 4px 12px rgba(5,150,105,0.4)'"
              @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 8px rgba(5,150,105,0.3)'"
            >
              Submit
      </button>
          </div>
          
          <!-- Placeholder for submit mode -->
          <div style="background: rgba(240, 253, 244, 0.8); border: 2px dashed rgba(34, 197, 94, 0.4); border-radius: 8px; padding: 24px; margin-top: 12px; text-align: center; min-height: 200px; display: flex; align-items: center; justify-content: center;">
            <div style="display: flex; flex-direction: column; align-items: center; gap: 12px;">
              <div style="width: 48px; height: 48px; background: linear-gradient(45deg, rgba(5, 150, 105, 0.1), rgba(5, 150, 105, 0.05)); border-radius: 50%; display: flex; align-items: center; justify-content: center; border: 1px solid rgba(5, 150, 105, 0.2);">
                <span style="font-size: 20px; opacity: 0.7;">🎫</span>
              </div>
              <div style="color: #047857; font-size: 14px; font-weight: 500; margin-bottom: 4px;">Quick Submit</div>
              <div style="color: #6b7280; font-size: 12px; line-height: 1.4; max-width: 250px;">Enter a ticket ID above to quickly load it into the AI chat for immediate assistance</div>
            </div>
          </div>
  </div>

        <!-- Lookup Mode -->
        <div v-if="ticketMode === 'lookup'">
          <div style="display: flex; gap: 12px; margin-bottom: 16px;">
            <input
              v-model="lookupTicketId"
              placeholder="Enter Ticket ID to lookup"
              style="flex: 1; padding: 14px 16px; border: 2px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; transition: all 0.2s ease; background: rgba(255,255,255,0.95);"
              @focus="this.style.borderColor='#2563eb'; this.style.boxShadow='0 0 0 3px rgba(37,99,235,0.1)'"
              @blur="this.style.borderColor='rgba(209, 213, 219, 0.8)'; this.style.boxShadow='none'"
              @keyup.enter="lookupTicket"
            />
            <button
              @click="lookupTicket"
              :disabled="!lookupTicketId.trim() || lookupLoading"
              style="background: linear-gradient(45deg, #2563eb, #1d4ed8); color: white; border: none; border-radius: 8px; padding: 14px 24px; font-weight: 600; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 2px 8px rgba(37,99,235,0.3);"
              :style="{ opacity: (!lookupTicketId.trim() || lookupLoading) ? '0.6' : '1', cursor: (!lookupTicketId.trim() || lookupLoading) ? 'not-allowed' : 'pointer' }"
              @mouseover="if (lookupTicketId.trim() && !lookupLoading) { this.style.transform='translateY(-1px)'; this.style.boxShadow='0 4px 12px rgba(37,99,235,0.4)' }"
              @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 8px rgba(37,99,235,0.3)'"
            >
              <span v-if="lookupLoading">🔍</span>
              <span v-else>Lookup</span>
            </button>
          </div>

          <!-- Placeholder when no ticket info is shown -->
          <div v-if="!ticketInfo && !lookupError" style="background: rgba(249, 250, 251, 0.8); border: 2px dashed rgba(209, 213, 219, 0.6); border-radius: 8px; padding: 24px; text-align: center; min-height: 200px; display: flex; align-items: center; justify-content: center;">
            <div style="display: flex; flex-direction: column; align-items: center; gap: 12px;">
              <div style="width: 48px; height: 48px; background: linear-gradient(45deg, rgba(37, 99, 235, 0.1), rgba(37, 99, 235, 0.05)); border-radius: 50%; display: flex; align-items: center; justify-content: center; border: 1px solid rgba(37, 99, 235, 0.2);">
                <span style="font-size: 20px; opacity: 0.7;">🔍</span>
              </div>
              <div style="color: #6b7280; font-size: 14px; font-weight: 500; margin-bottom: 4px;">Ticket Lookup</div>
              <div style="color: #9ca3af; font-size: 12px; line-height: 1.4; max-width: 250px;">Enter a ticket ID above to search and view detailed ticket information</div>
  </div>
</div>

          <!-- Ticket Information Display -->
          <div v-if="ticketInfo" style="background: rgba(239, 246, 255, 0.8); border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 8px; padding: 16px; margin-top: 12px;">
            <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 12px;">
              <span style="font-size: 16px;">🎫</span>
              <h4 style="margin: 0; font-size: 16px; font-weight: 600; color: #1e40af;">Ticket Details</h4>
              <div style="margin-left: auto; background: linear-gradient(45deg, #10b981, #059669); color: white; padding: 4px 8px; border-radius: 4px; font-size: 10px; font-weight: 600;">
                {{ ticketInfo.status || 'ACTIVE' }}
    </div>
  </div>
            
            <div style="display: grid; gap: 8px;">
              <div style="display: flex; justify-content: space-between; align-items: center; padding: 6px 0; border-bottom: 1px solid rgba(59, 130, 246, 0.2);">
                <span style="font-weight: 500; color: #374151; font-size: 13px;">Ticket ID:</span>
                <span style="font-family: 'Monaco', monospace; color: #1e40af; font-size: 13px; font-weight: 600;">#{{ ticketInfo.id || lookupTicketId }}</span>
</div>

              <div v-if="ticketInfo.priority" style="display: flex; justify-content: space-between; align-items: center; padding: 6px 0; border-bottom: 1px solid rgba(59, 130, 246, 0.2);">
                <span style="font-weight: 500; color: #374151; font-size: 13px;">Priority:</span>
                <span :style="{ 
                  color: ticketInfo.priority === 'High' ? '#dc2626' : ticketInfo.priority === 'Medium' ? '#f59e0b' : '#059669', 
                  fontWeight: '600',
                  fontSize: '13px'
                }">
                  {{ ticketInfo.priority }}
                </span>
</div>
              
              <div v-if="ticketInfo.category" style="display: flex; justify-content: space-between; align-items: center; padding: 6px 0; border-bottom: 1px solid rgba(59, 130, 246, 0.2);">
                <span style="font-weight: 500; color: #374151; font-size: 13px;">Category:</span>
                <span style="color: #6b7280; font-size: 13px;">{{ ticketInfo.category }}</span>
              </div>
              
              <div v-if="ticketInfo.summary" style="display: flex; flex-direction: column; gap: 4px; padding: 6px 0;">
                <span style="font-weight: 500; color: #374151; font-size: 13px;">Summary:</span>
                <span style="color: #6b7280; font-size: 13px; line-height: 1.4;">{{ ticketInfo.summary }}</span>
              </div>
            </div>
            
            <!-- Action buttons -->
            <div style="display: flex; gap: 8px; margin-top: 12px; padding-top: 12px; border-top: 1px solid rgba(59, 130, 246, 0.2);">
  <button
                @click="useTicketForChat"
                style="background: linear-gradient(45deg, #2563eb, #1d4ed8); color: white; border: none; border-radius: 6px; padding: 8px 16px; font-size: 12px; font-weight: 600; cursor: pointer; transition: all 0.2s ease; flex: 1;"
                @mouseover="this.style.transform='translateY(-1px)'"
                @mouseout="this.style.transform='translateY(0)'"
              >
                Use for Chat
              </button>
              <button 
                @click="clearTicketInfo"
                style="background: rgba(107, 114, 128, 0.1); color: #6b7280; border: 1px solid rgba(107, 114, 128, 0.2); border-radius: 6px; padding: 8px 16px; font-size: 12px; font-weight: 600; cursor: pointer; transition: all 0.2s ease;"
                @mouseover="this.style.transform='translateY(-1px)'"
                @mouseout="this.style.transform='translateY(0)'"
              >
                Clear
  </button>
            </div>
</div>

          <!-- Error display -->
          <div v-if="lookupError" style="background: rgba(254, 242, 242, 0.8); border: 1px solid rgba(252, 165, 165, 0.5); border-radius: 8px; padding: 12px; margin-top: 12px; color: #dc2626; font-size: 13px;">
            {{ lookupError }}
          </div>
        </div>
      </div>

      <!-- System Stats -->
      <div style="flex: 1; background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); padding: 28px; border: 1px solid rgba(226,232,240,0.5);">
        <h3 style="margin: 0 0 28px 0; font-size: 18px; font-weight: 700; color: #0f172a; display: flex; align-items: center; gap: 16px;">
          <div style="width: 48px; height: 48px; background: linear-gradient(135deg, #3b82f6, #1e40af); border-radius: 12px; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);">
            <span style="font-size: 20px; color: white;">📊</span>
          </div>
          <div>
            <div style="font-size: 18px; font-weight: 700; color: #0f172a;">System Analytics</div>
            <div style="font-size: 13px; color: #64748b; font-weight: 500;">Performance metrics & insights</div>
          </div>
        </h3>
        
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 24px;">
          <!-- Tokens Used -->
          <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.06), rgba(59, 130, 246, 0.02)); border: 1px solid rgba(59, 130, 246, 0.12); border-radius: 12px; padding: 20px; transition: all 0.2s ease;" @mouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 20px rgba(59, 130, 246, 0.15)'" @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='none'">
            <div style="color: #64748b; font-size: 11px; font-weight: 700; margin-bottom: 12px; text-transform: uppercase; letter-spacing: 0.1em;">Total Tokens</div>
            <div style="font-size: 28px; font-weight: 800; color: #0f172a; line-height: 1; margin-bottom: 8px;">{{ tokens && tokens.total_tokens ? tokens.total_tokens.toLocaleString() : '0' }}</div>
            <div style="display: flex; align-items: center; gap: 6px;">
              <div style="width: 6px; height: 6px; background: #3b82f6; border-radius: 50%;"></div>
              <span style="color: #64748b; font-size: 11px; font-weight: 600;">Active Usage</span>
            </div>
</div>

          <!-- API Calls -->
          <div style="background: linear-gradient(135deg, rgba(16, 185, 129, 0.06), rgba(16, 185, 129, 0.02)); border: 1px solid rgba(16, 185, 129, 0.12); border-radius: 12px; padding: 20px; transition: all 0.2s ease;" @mouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 20px rgba(16, 185, 129, 0.15)'" @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='none'">
            <div style="color: #64748b; font-size: 11px; font-weight: 700; margin-bottom: 12px; text-transform: uppercase; letter-spacing: 0.1em;">API Calls</div>
            <div style="font-size: 28px; font-weight: 800; color: #0f172a; line-height: 1; margin-bottom: 8px;">{{ Array.isArray(apiResponse) ? apiResponse.length : '0' }}</div>
            <div style="display: flex; align-items: center; gap: 6px;">
              <div style="width: 6px; height: 6px; background: #10b981; border-radius: 50%;"></div>
              <span style="color: #64748b; font-size: 11px; font-weight: 600;">Requests Made</span>
            </div>
</div>

          <!-- Prompt Tokens -->
          <div style="background: linear-gradient(135deg, rgba(139, 92, 246, 0.06), rgba(139, 92, 246, 0.02)); border: 1px solid rgba(139, 92, 246, 0.12); border-radius: 12px; padding: 20px; transition: all 0.2s ease;" @mouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 20px rgba(139, 92, 246, 0.15)'" @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='none'">
            <div style="color: #64748b; font-size: 11px; font-weight: 700; margin-bottom: 12px; text-transform: uppercase; letter-spacing: 0.1em;">Input Tokens</div>
            <div style="font-size: 28px; font-weight: 800; color: #0f172a; line-height: 1; margin-bottom: 8px;">{{ tokens && tokens.prompt_tokens ? tokens.prompt_tokens.toLocaleString() : '0' }}</div>
            <div style="display: flex; align-items: center; gap: 6px;">
              <div style="width: 6px; height: 6px; background: #8b5cf6; border-radius: 50%;"></div>
              <span style="color: #64748b; font-size: 11px; font-weight: 600;">Prompts Sent</span>
            </div>
</div>

          <!-- Completion Tokens -->
          <div style="background: linear-gradient(135deg, rgba(245, 158, 11, 0.06), rgba(245, 158, 11, 0.02)); border: 1px solid rgba(245, 158, 11, 0.12); border-radius: 12px; padding: 20px; transition: all 0.2s ease;" @mouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 20px rgba(245, 158, 11, 0.15)'" @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='none'">
            <div style="color: #64748b; font-size: 11px; font-weight: 700; margin-bottom: 12px; text-transform: uppercase; letter-spacing: 0.1em;">Response Tokens</div>
            <div style="font-size: 28px; font-weight: 800; color: #0f172a; line-height: 1; margin-bottom: 8px;">{{ tokens && tokens.completion_tokens ? tokens.completion_tokens.toLocaleString() : '0' }}</div>
            <div style="display: flex; align-items: center; gap: 6px;">
              <div style="width: 6px; height: 6px; background: #f59e0b; border-radius: 50%;"></div>
              <span style="color: #64748b; font-size: 11px; font-weight: 600;">AI Generated</span>
            </div>
          </div>
        </div>
        
        <!-- Customer Satisfaction Section -->
        <div style="background: linear-gradient(135deg, rgba(34, 197, 94, 0.08), rgba(34, 197, 94, 0.03)); border: 1px solid rgba(34, 197, 94, 0.15); border-radius: 12px; padding: 24px;">
          <div style="display: flex; align-items: center; justify-content: space-between;">
            <div>
              <div style="color: #64748b; font-size: 11px; font-weight: 700; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.1em;">Customer Satisfaction</div>
              <div style="display: flex; align-items: center; gap: 16px;">
                <span style="font-size: 32px; font-weight: 800; color: #0f172a;">{{ satisfaction || '4.8' }}</span>
                <div style="display: flex; gap: 4px;">
                  <span style="color: #fbbf24; font-size: 18px; filter: drop-shadow(0 1px 3px rgba(251, 191, 36, 0.4));">⭐</span>
                  <span style="color: #fbbf24; font-size: 18px; filter: drop-shadow(0 1px 3px rgba(251, 191, 36, 0.4));">⭐</span>
                  <span style="color: #fbbf24; font-size: 18px; filter: drop-shadow(0 1px 3px rgba(251, 191, 36, 0.4));">⭐</span>
                  <span style="color: #fbbf24; font-size: 18px; filter: drop-shadow(0 1px 3px rgba(251, 191, 36, 0.4));">⭐</span>
                  <span style="color: #cbd5e1; font-size: 18px;">⭐</span>
                </div>
              </div>
            </div>
            <div style="display: flex; align-items: center; gap: 8px; background: rgba(34, 197, 94, 0.1); padding: 8px 16px; border-radius: 24px; border: 1px solid rgba(34, 197, 94, 0.2);">
              <span style="color: #16a34a; font-size: 14px;">📈</span>
              <span style="color: #0f5132; font-size: 12px; font-weight: 700;">Excellent</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Client Info -->
      <div style="flex: 1; background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); padding: 28px; border: 1px solid rgba(226,232,240,0.5);">
        <h3 style="margin: 0 0 24px 0; font-size: 18px; font-weight: 700; color: #0f172a; display: flex; align-items: center; gap: 16px;">
          <div style="width: 32px; height: 32px; background: linear-gradient(135deg, #8b5cf6, #7c3aed); border-radius: 8px; display: flex; align-items: center; justify-content: center; box-shadow: 0 3px 8px rgba(139, 92, 246, 0.3);">
            <span style="font-size: 16px; color: white;">👤</span>
          </div>
          <div>
            <div style="font-size: 18px; font-weight: 700; color: #0f172a;">Client Information</div>
            <div style="font-size: 13px; color: #64748b; font-weight: 500;">Customer & system details</div>
          </div>
        </h3>
        
        <div style="display: flex; flex-direction: column; gap: 20px;">
          <div style="display: flex; flex-direction: column;">
            <label style="font-size: 12px; font-weight: 700; color: #475569; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.05em;">Client ID</label>
            <input
              v-model="clientId"
              type="text"
              placeholder="Enter Client ID"
              style="padding: 14px 16px; border: 2px solid rgba(226, 232, 240, 0.8); border-radius: 12px; font-size: 14px; transition: all 0.2s ease; background: rgba(255,255,255,0.9); font-weight: 500;"
              @focus="this.style.borderColor='#8b5cf6'; this.style.boxShadow='0 0 0 3px rgba(139,92,246,0.1)'"
              @blur="this.style.borderColor='rgba(226, 232, 240, 0.8)'; this.style.boxShadow='none'"
            />
          </div>
          
          <div style="display: flex; flex-direction: column;">
            <label style="font-size: 12px; font-weight: 700; color: #475569; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.05em;">Product/Service</label>
            <input
              v-model="product"
              type="text"
              placeholder="Enter Product or Service"
              style="padding: 14px 16px; border: 2px solid rgba(226, 232, 240, 0.8); border-radius: 12px; font-size: 14px; transition: all 0.2s ease; background: rgba(255,255,255,0.9); font-weight: 500;"
              @focus="this.style.borderColor='#8b5cf6'; this.style.boxShadow='0 0 0 3px rgba(139,92,246,0.1)'"
              @blur="this.style.borderColor='rgba(226, 232, 240, 0.8)'; this.style.boxShadow='none'"
            />
          </div>
          
          <div style="display: flex; flex-direction: column;">
            <label style="font-size: 12px; font-weight: 700; color: #475569; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.05em;">Server</label>
            <input
              v-model="server"
              type="text"
              placeholder="Enter Server"
              style="padding: 14px 16px; border: 2px solid rgba(226, 232, 240, 0.8); border-radius: 12px; font-size: 14px; transition: all 0.2s ease; background: rgba(255,255,255,0.9); font-weight: 500;"
              @focus="this.style.borderColor='#8b5cf6'; this.style.boxShadow='0 0 0 3px rgba(139,92,246,0.1)'"
              @blur="this.style.borderColor='rgba(226, 232, 240, 0.8)'; this.style.boxShadow='none'"
            />
          </div>
          
          <button
            @click="handleClientSubmit"
            :disabled="!clientId.trim() && !product.trim() && !server.trim()"
            style="background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white; border: none; border-radius: 12px; padding: 14px 24px; font-weight: 700; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(139,92,246,0.4); margin-top: 12px; font-size: 14px;"
            :style="{ opacity: (!clientId.trim() && !product.trim() && !server.trim()) ? '0.6' : '1', cursor: (!clientId.trim() && !product.trim() && !server.trim()) ? 'not-allowed' : 'pointer' }"
            @mouseover="if (clientId.trim() || product.trim() || server.trim()) { this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 20px rgba(139,92,246,0.5)' }"
            @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(139,92,246,0.4)'"
          >
            Save Client Information
          </button>
        </div>
      </div>
    </div>

    <!-- Navigation buttons -->
    <div style="padding: 0 32px 24px; display: flex; gap: 20px;">
      <button @click="view = 'dashboard'" style="background: linear-gradient(135deg, #6b7280, #4b5563); color: white; border: none; border-radius: 12px; padding: 14px 28px; font-weight: 700; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(107,114,128,0.4); display: flex; align-items: center; gap: 8px;" @mouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 20px rgba(107,114,128,0.5)'" @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(107,114,128,0.4)'">
        <span>🏠</span>
        <span>Back to Dashboard</span>
      </button>
      <button @click="view = 'session'" style="background: linear-gradient(135deg, #6b7280, #4b5563); color: white; border: none; border-radius: 12px; padding: 14px 28px; font-weight: 700; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(107,114,128,0.4); display: flex; align-items: center; gap: 8px;" @mouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 20px rgba(107,114,128,0.5)'" @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(107,114,128,0.4)'">
        <span>👁️</span>
        <span>View Session</span>
      </button>
      <button @click="aiLog()" style="background: linear-gradient(135deg, #6b7280, #4b5563); color: white; border: none; border-radius: 12px; padding: 14px 28px; font-weight: 700; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(107,114,128,0.4); display: flex; align-items: center; gap: 8px;" @mouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 20px rgba(107,114,128,0.5)'" @mouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(107,114,128,0.4)'">
        <span>📋</span>
        <span>View History</span>
      </button>
    </div>
  </div>

  <div v-else-if="view === 'session'">
    <p>ID Number: <input type="text" v-model="id"></p>
    <button @click="aiView()" :style="{marginTop: '20px'}">
        Submit
      </button>
    <p :style="{fontSize: '20px'}"> 
       Message History {{ messageHistory }}
    </p>
    <button @click="view ='AI'" :style="{marginTop: '40px'}">
        Back
    </button>
  </div>

  <div v-else-if="view === 'log'">
    <p :style="{fontSize: '40px'}"> 
       History Log:
    </p>
    <p style="white-space: pre-wrap">
      {{ historyLog }}
    </p>
    <button @click="view ='AI'" :style="{marginTop: '40px'}">
        Back
    </button>
  </div>

  <div v-else-if="view === 'clientInput'" style="display: flex; flex-direction: column; align-items: center; padding: 20px;">
  <p style="font-size: 40px; margin-bottom: 20px;"> 
    Client Info Input:
  </p>

  <form @submit.prevent="handleClientSubmit" style="display: flex; flex-direction: column; width: 100%; max-width: 400px; gap: 15px;">
    
    <label style="display: flex; flex-direction: column; font-weight: 500;">
      Client ID:
      <input
        v-model="clientId"
        type="text"
        placeholder="Enter Client ID"
        style="padding: 10px; border: 1px solid #ccc; border-radius: 6px; margin-top: 5px;"
      />
    </label>

    <label style="display: flex; flex-direction: column; font-weight: 500;">
      Product/Service:
      <input
        v-model="product"
        type="text"
        placeholder="Enter Product or Service"
        style="padding: 10px; border: 1px solid #ccc; border-radius: 6px; margin-top: 5px;"
      />
    </label>

    <label style="display: flex; flex-direction: column; font-weight: 500;">
      Server:
      <input
        v-model="server"
        type="text"
        placeholder="Enter Server"
        style="padding: 10px; border: 1px solid #ccc; border-radius: 6px; margin-top: 5px;"
      />
    </label>

    <button
      type="submit"
      style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 6px; font-weight: 600; cursor: pointer;"
    >
      Submit
    </button>
  </form>

  <button @click="view ='AI'" :style="{marginTop: '40px'}">
        Back
  </button>
</div>

  <!-- COMPREHENSIVE TICKETING SYSTEM -->
  <div v-else-if="view === 'tickets'" style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; min-height: 100vh; width: 100vw; margin: 0; padding: 0; position: fixed; top: 0; left: 0; overflow-y: auto;">
    
    <!-- Ticket System Header -->
    <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-bottom: 1px solid rgba(226, 232, 240, 0.8); padding: 16px 32px; display: flex; justify-content: space-between; align-items: center; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
      <div style="display: flex; align-items: center; gap: 16px;">
        <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); border-radius: 12px; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);">
          <span style="font-size: 18px; color: white;">🎫</span>
        </div>
        <div>
          <h1 style="margin: 0; font-size: 24px; font-weight: 700; color: #0f172a;">Support Tickets</h1>
          <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">Manage customer support requests</p>
        </div>
      </div>
      
      <div style="display: flex; gap: 12px;">
        <button @click="currentTicketView = 'create'" style="background: linear-gradient(135deg, #10b981, #059669); color: white; border: none; border-radius: 8px; padding: 12px 24px; font-weight: 600; cursor: pointer; display: flex; align-items: center; gap: 8px;">
          <span>➕</span>
          New Ticket
        </button>
        <button @click="view = 'dashboard'" style="background: rgba(107, 114, 128, 0.1); color: #6b7280; border: 1px solid rgba(107, 114, 128, 0.2); border-radius: 8px; padding: 12px 20px; font-weight: 600; cursor: pointer;">
          ← Back
        </button>
      </div>
    </div>

    <!-- Ticket Filters & Search -->
    <div v-if="currentTicketView === 'list'" style="background: rgba(255, 255, 255, 0.8); border-bottom: 1px solid rgba(226, 232, 240, 0.6); padding: 20px 32px;">
      <div style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 1fr; gap: 16px; align-items: end;">
        
        <!-- Search -->
        <div>
          <label style="display: block; font-size: 12px; font-weight: 700; color: #374151; margin-bottom: 6px; text-transform: uppercase; letter-spacing: 0.5px;">Search Tickets</label>
          <input 
            v-model="searchQuery" 
            placeholder="Search by subject, client, or ticket ID..." 
            style="width: 100%; padding: 12px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px;"
          />
        </div>
        
        <!-- Status Filter -->
        <div>
          <label style="display: block; font-size: 12px; font-weight: 700; color: #374151; margin-bottom: 6px; text-transform: uppercase; letter-spacing: 0.5px;">Status</label>
          <select v-model="ticketFilters.status" style="width: 100%; padding: 12px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; background: white;">
            <option value="all">All Statuses</option>
            <option value="open">Open</option>
            <option value="pending">Pending</option>
            <option value="resolved">Resolved</option>
            <option value="closed">Closed</option>
          </select>
        </div>
        
        <!-- Priority Filter -->
        <div>
          <label style="display: block; font-size: 12px; font-weight: 700; color: #374151; margin-bottom: 6px; text-transform: uppercase; letter-spacing: 0.5px;">Priority</label>
          <select v-model="ticketFilters.priority" style="width: 100%; padding: 12px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; background: white;">
            <option value="all">All Priorities</option>
            <option value="low">Low</option>
            <option value="medium">Medium</option>
            <option value="high">High</option>
            <option value="critical">Critical</option>
          </select>
        </div>
        
        <!-- Category Filter -->
        <div>
          <label style="display: block; font-size: 12px; font-weight: 700; color: #374151; margin-bottom: 6px; text-transform: uppercase; letter-spacing: 0.5px;">Category</label>
          <select v-model="ticketFilters.category" style="width: 100%; padding: 12px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; background: white;">
            <option value="all">All Categories</option>
            <option value="technical">Technical</option>
            <option value="billing">Billing</option>
            <option value="general">General</option>
            <option value="feature">Feature Request</option>
          </select>
        </div>
        
        <!-- Actions -->
        <div style="display: flex; gap: 8px;">
          <button @click="refreshTickets" style="background: rgba(59, 130, 246, 0.1); color: #3b82f6; border: 1px solid rgba(59, 130, 246, 0.2); border-radius: 8px; padding: 12px; cursor: pointer;">🔄</button>
          <button @click="exportTickets" style="background: rgba(16, 185, 129, 0.1); color: #059669; border: 1px solid rgba(16, 185, 129, 0.2); border-radius: 8px; padding: 12px; cursor: pointer;">📊</button>
        </div>
      </div>
    </div>

    <!-- Tickets List View -->
    <div v-if="currentTicketView === 'list'" style="padding: 32px;">
      <div style="background: rgba(255, 255, 255, 0.95); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        
        <!-- Table Header -->
        <div style="background: linear-gradient(135deg, rgba(248, 250, 252, 0.95), rgba(241, 245, 249, 0.8)); padding: 20px 24px; border-bottom: 1px solid rgba(226, 232, 240, 0.6);">
          <div style="display: grid; grid-template-columns: 100px 3fr 1.5fr 1fr 1fr 1fr 100px; gap: 20px; font-size: 12px; font-weight: 700; color: #64748b; text-transform: uppercase; letter-spacing: 0.8px; align-items: center;">
            <div>ID</div>
            <div>SUBJECT</div>
            <div>CLIENT</div>
            <div>STATUS</div>
            <div>PRIORITY</div>
            <div>UPDATED</div>
            <div>ACTIONS</div>
          </div>
        </div>
        
        <!-- Tickets -->
        <div style="max-height: 600px; overflow-y: auto;">
          <div v-if="filteredTickets.length === 0" style="padding: 60px; text-align: center; color: #64748b;">
            <span style="font-size: 48px; margin-bottom: 16px; display: block; opacity: 0.5;">🎫</span>
            <h3 style="margin: 0 0 8px 0; font-size: 18px; font-weight: 600;">No tickets found</h3>
            <p style="margin: 0; font-size: 14px;">Try adjusting your filters or create a new ticket</p>
          </div>
          
          <div v-for="(ticket, index) in filteredTickets" :key="ticket.id || index" 
               style="display: grid; grid-template-columns: 100px 3fr 1.5fr 1fr 1fr 1fr 100px; gap: 20px; padding: 20px 24px; background: rgba(255, 255, 255, 0.8); border-bottom: 1px solid rgba(226, 232, 240, 0.4); transition: all 0.3s ease; cursor: pointer; align-items: center;"
               @click="viewTicket(ticket)"
               @mouseover="this.style.background='rgba(59, 130, 246, 0.03)'; this.style.transform='translateX(4px)'"
               @mouseout="this.style.background='rgba(255, 255, 255, 0.8)'; this.style.transform='translateX(0)'">
            
            <div style="font-family: 'SF Mono', monospace; font-weight: 700; color: #3b82f6; font-size: 13px;">#{{ ticket.id || (1000 + index) }}</div>
            
            <div>
              <div style="font-weight: 700; color: #0f172a; font-size: 15px; margin-bottom: 4px; line-height: 1.4;">{{ ticket.subject || 'Untitled Ticket' }}</div>
              <div style="font-size: 12px; color: #64748b; line-height: 1.3;">{{ (ticket.message || 'No description available').substring(0, 80) }}{{ (ticket.message || '').length > 80 ? '...' : '' }}</div>
            </div>
            
            <div>
              <div style="font-weight: 600; color: #0f172a; font-size: 14px; margin-bottom: 2px;">{{ ticket.client || 'Unknown Client' }}</div>
              <div style="font-size: 12px; color: #64748b;">{{ ticket.clientEmail || 'no email' }}</div>
            </div>
            
            <div>
              <span :style="`background: ${getStatusColor(ticket.status)}15; color: ${getStatusColor(ticket.status)}; padding: 6px 12px; border-radius: 12px; font-size: 11px; font-weight: 700; text-transform: uppercase; border: 1px solid ${getStatusColor(ticket.status)}25;`">
                {{ ticket.status || 'Open' }}
              </span>
            </div>
            
            <div>
              <span :style="`background: ${getPriorityColor(ticket.priority)}15; color: ${getPriorityColor(ticket.priority)}; padding: 6px 12px; border-radius: 12px; font-size: 11px; font-weight: 700; text-transform: uppercase; border: 1px solid ${getPriorityColor(ticket.priority)}25;`">
                {{ ticket.priority || 'Medium' }}
              </span>
            </div>
            
            <div style="font-size: 12px; color: #64748b; font-weight: 500;">{{ ticket.updated || 'Just now' }}</div>
            
            <div style="display: flex; gap: 4px;">
              <button @click.stop="editTicket(ticket)" style="background: rgba(139, 92, 246, 0.1); color: #8b5cf6; border: 1px solid rgba(139, 92, 246, 0.2); border-radius: 6px; padding: 6px; cursor: pointer; font-size: 12px;">✏️</button>
              <button @click.stop="deleteTicket(ticket)" style="background: rgba(239, 68, 68, 0.1); color: #dc2626; border: 1px solid rgba(239, 68, 68, 0.2); border-radius: 6px; padding: 6px; cursor: pointer; font-size: 12px;">🗑️</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Create/Edit Ticket Form -->
    <div v-if="currentTicketView === 'create' || currentTicketView === 'edit'" style="padding: 32px;">
      <div style="max-width: 800px; margin: 0 auto;">
        <div style="background: rgba(255, 255, 255, 0.95); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
          
          <!-- Form Header -->
          <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(99, 102, 241, 0.05)); padding: 24px 32px; border-bottom: 1px solid rgba(226, 232, 240, 0.6);">
            <h2 style="margin: 0; font-size: 20px; font-weight: 700; color: #0f172a;">{{ currentTicketView === 'create' ? 'Create New Ticket' : 'Edit Ticket' }}</h2>
            <p style="margin: 4px 0 0 0; font-size: 14px; color: #64748b;">{{ currentTicketView === 'create' ? 'Fill out the form below to create a new support ticket' : 'Update ticket information' }}</p>
          </div>
          
          <!-- Form Content -->
          <div style="padding: 32px;">
            <form @submit.prevent="saveTicket">
              
              <!-- Basic Information -->
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px; margin-bottom: 24px;">
                <div>
                  <label style="display: block; font-size: 12px; font-weight: 700; color: #374151; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.5px;">Client ID *</label>
                  <input 
                    v-model="ticketForm.clientId" 
                    required
                    placeholder="Enter client ID or email"
                    style="width: 100%; padding: 14px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; transition: all 0.2s ease;"
                    @focus="this.style.borderColor='#3b82f6'; this.style.boxShadow='0 0 0 3px rgba(59,130,246,0.1)'"
                    @blur="this.style.borderColor='rgba(209, 213, 219, 0.8)'; this.style.boxShadow='none'"
                  />
                </div>
                
                <div>
                  <label style="display: block; font-size: 12px; font-weight: 700; color: #374151; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.5px;">Category</label>
                  <select v-model="ticketForm.category" style="width: 100%; padding: 14px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; background: white;">
                    <option value="general">General Support</option>
                    <option value="technical">Technical Issue</option>
                    <option value="billing">Billing Question</option>
                    <option value="feature">Feature Request</option>
                    <option value="bug">Bug Report</option>
                  </select>
                </div>
              </div>
              
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px; margin-bottom: 24px;">
                <div>
                  <label style="display: block; font-size: 12px; font-weight: 700; color: #374151; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.5px;">Priority</label>
                  <select v-model="ticketForm.priority" style="width: 100%; padding: 14px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; background: white;">
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                    <option value="critical">Critical</option>
                  </select>
                </div>
                
                <div v-if="currentTicketView === 'edit'">
                  <label style="display: block; font-size: 12px; font-weight: 700; color: #374151; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.5px;">Status</label>
                  <select v-model="selectedTicket.status" style="width: 100%; padding: 14px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; background: white;">
                    <option value="open">Open</option>
                    <option value="pending">Pending</option>
                    <option value="resolved">Resolved</option>
                    <option value="closed">Closed</option>
                  </select>
                </div>
              </div>
              
              <!-- Subject -->
              <div style="margin-bottom: 24px;">
                <label style="display: block; font-size: 12px; font-weight: 700; color: #374151; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.5px;">Subject *</label>
                <input 
                  v-model="ticketForm.subject" 
                  required
                  placeholder="Brief description of the issue"
                  style="width: 100%; padding: 14px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; transition: all 0.2s ease;"
                  @focus="this.style.borderColor='#3b82f6'; this.style.boxShadow='0 0 0 3px rgba(59,130,246,0.1)'"
                  @blur="this.style.borderColor='rgba(209, 213, 219, 0.8)'; this.style.boxShadow='none'"
                />
              </div>
              
              <!-- Message -->
              <div style="margin-bottom: 24px;">
                <label style="display: block; font-size: 12px; font-weight: 700; color: #374151; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.5px;">Message *</label>
                <textarea 
                  v-model="ticketForm.message" 
                  required
                  rows="6"
                  placeholder="Detailed description of the issue or request..."
                  style="width: 100%; padding: 14px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; transition: all 0.2s ease; resize: vertical; font-family: inherit;"
                  @focus="this.style.borderColor='#3b82f6'; this.style.boxShadow='0 0 0 3px rgba(59,130,246,0.1)'"
                  @blur="this.style.borderColor='rgba(209, 213, 219, 0.8)'; this.style.boxShadow='none'"
                ></textarea>
              </div>
              
              <!-- Tags -->
              <div style="margin-bottom: 32px;">
                <label style="display: block; font-size: 12px; font-weight: 700; color: #374151; margin-bottom: 8px; text-transform: uppercase; letter-spacing: 0.5px;">Tags</label>
                <input 
                  v-model="ticketTagInput" 
                  @keyup.enter="addTicketTag"
                  placeholder="Add tags (press Enter to add)"
                  style="width: 100%; padding: 14px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px; transition: all 0.2s ease;"
                />
                <div v-if="ticketForm.tags.length > 0" style="display: flex; gap: 8px; margin-top: 8px; flex-wrap: wrap;">
                  <span v-for="(tag, index) in ticketForm.tags" :key="index" style="background: rgba(59, 130, 246, 0.1); color: #3b82f6; padding: 4px 12px; border-radius: 12px; font-size: 12px; font-weight: 600; display: flex; align-items: center; gap: 6px;">
                    {{ tag }}
                    <button @click="removeTicketTag(index)" style="background: none; border: none; color: #3b82f6; cursor: pointer; font-size: 12px; padding: 0;">×</button>
                  </span>
                </div>
              </div>
              
              <!-- Form Actions -->
              <div style="display: flex; gap: 12px; justify-content: end; padding-top: 24px; border-top: 1px solid rgba(226, 232, 240, 0.6);">
                <button @click="currentTicketView = 'list'" type="button" style="background: rgba(107, 114, 128, 0.1); color: #6b7280; border: 1px solid rgba(107, 114, 128, 0.2); border-radius: 8px; padding: 12px 24px; font-weight: 600; cursor: pointer;">
                  Cancel
                </button>
                <button type="submit" style="background: linear-gradient(135deg, #10b981, #059669); color: white; border: none; border-radius: 8px; padding: 12px 24px; font-weight: 600; cursor: pointer; display: flex; align-items: center; gap: 8px;">
                  <span>💾</span>
                  {{ currentTicketView === 'create' ? 'Create Ticket' : 'Update Ticket' }}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- View Ticket Details -->
    <div v-if="currentTicketView === 'view' && selectedTicket" style="padding: 32px;">
      <div style="max-width: 1000px; margin: 0 auto;">
        <div style="background: rgba(255, 255, 255, 0.95); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
          
          <!-- Ticket Header -->
          <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(99, 102, 241, 0.05)); padding: 24px 32px; border-bottom: 1px solid rgba(226, 232, 240, 0.6);">
            <div style="display: flex; justify-content: space-between; align-items: start;">
              <div>
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 8px;">
                  <h2 style="margin: 0; font-size: 24px; font-weight: 700; color: #0f172a;">{{ selectedTicket.subject }}</h2>
                  <span style="font-family: 'SF Mono', monospace; background: rgba(59, 130, 246, 0.1); color: #3b82f6; padding: 4px 12px; border-radius: 8px; font-size: 12px; font-weight: 700;">#{{ selectedTicket.id }}</span>
                </div>
                <div style="display: flex; gap: 12px; align-items: center;">
                  <span :style="`background: ${getStatusColor(selectedTicket.status)}15; color: ${getStatusColor(selectedTicket.status)}; padding: 6px 16px; border-radius: 12px; font-size: 12px; font-weight: 700; text-transform: uppercase;`">
                    {{ selectedTicket.status }}
                  </span>
                  <span :style="`background: ${getPriorityColor(selectedTicket.priority)}15; color: ${getPriorityColor(selectedTicket.priority)}; padding: 6px 16px; border-radius: 12px; font-size: 12px; font-weight: 700; text-transform: uppercase;`">
                    {{ selectedTicket.priority }}
                  </span>
                  <span style="color: #64748b; font-size: 14px;">Created {{ selectedTicket.created || 'recently' }}</span>
                </div>
              </div>
              <div style="display: flex; gap: 8px;">
                <button @click="editTicket(selectedTicket)" style="background: rgba(139, 92, 246, 0.1); color: #8b5cf6; border: 1px solid rgba(139, 92, 246, 0.2); border-radius: 8px; padding: 8px 16px; cursor: pointer; font-size: 12px; font-weight: 600;">✏️ Edit</button>
                <button @click="currentTicketView = 'list'" style="background: rgba(107, 114, 128, 0.1); color: #6b7280; border: 1px solid rgba(107, 114, 128, 0.2); border-radius: 8px; padding: 8px 16px; cursor: pointer; font-size: 12px; font-weight: 600;">← Back</button>
              </div>
            </div>
          </div>
          
          <!-- Ticket Content -->
          <div style="padding: 32px;">
            <div style="background: rgba(249, 250, 251, 0.8); border: 1px solid rgba(226, 232, 240, 0.8); border-radius: 12px; padding: 24px; margin-bottom: 24px;">
              <div style="font-size: 15px; color: #374151; line-height: 1.6; white-space: pre-wrap;">{{ selectedTicket.message }}</div>
            </div>
            
            <!-- Client Information -->
            <div style="background: rgba(239, 246, 255, 0.8); border: 1px solid rgba(59, 130, 246, 0.2); border-radius: 12px; padding: 20px;">
              <h4 style="margin: 0 0 12px 0; font-size: 16px; font-weight: 700; color: #1e40af;">Client Information</h4>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
                <div>
                  <span style="color: #64748b; font-size: 12px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">Client</span>
                  <div style="font-weight: 600; color: #0f172a; font-size: 14px;">{{ selectedTicket.client || 'Unknown Client' }}</div>
                </div>
                <div>
                  <span style="color: #64748b; font-size: 12px; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">Email</span>
                  <div style="font-weight: 600; color: #0f172a; font-size: 14px;">{{ selectedTicket.clientEmail || 'No email provided' }}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- CLIENT MANAGEMENT SYSTEM -->
  <div v-else-if="view === 'clients'" style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; min-height: 100vh; width: 100vw; margin: 0; padding: 0; position: fixed; top: 0; left: 0; overflow-y: auto;">
    
    <!-- Client Management Header -->
    <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-bottom: 1px solid rgba(226, 232, 240, 0.8); padding: 16px 32px; display: flex; justify-content: space-between; align-items: center;">
      <div style="display: flex; align-items: center; gap: 16px;">
        <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #10b981, #059669); border-radius: 12px; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);">
          <span style="font-size: 18px; color: white;">👥</span>
        </div>
        <div>
          <h1 style="margin: 0; font-size: 24px; font-weight: 700; color: #0f172a;">Client Management</h1>
          <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">WHMCS Client Administration</p>
        </div>
      </div>
      
      <div style="display: flex; gap: 12px;">
        <button @click="createClient" style="background: linear-gradient(135deg, #10b981, #059669); color: white; border: none; border-radius: 8px; padding: 12px 24px; font-weight: 600; cursor: pointer; display: flex; align-items: center; gap: 8px;">
          <span>👤</span>
          Add Client
        </button>
        <button @click="view = 'dashboard'" style="background: rgba(107, 114, 128, 0.1); color: #6b7280; border: 1px solid rgba(107, 114, 128, 0.2); border-radius: 8px; padding: 12px 20px; font-weight: 600; cursor: pointer;">← Back</button>
      </div>
    </div>

    <!-- Client Stats Overview -->
    <div style="padding: 32px 32px 0;">
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 32px;">
        <div style="background: rgba(255, 255, 255, 0.95); border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 24px; text-align: center;">
          <div style="font-size: 32px; font-weight: 800; color: #10b981; margin-bottom: 8px;">{{ clients.length || 127 }}</div>
          <div style="font-size: 12px; color: #64748b; font-weight: 600; text-transform: uppercase;">Total Clients</div>
        </div>
        <div style="background: rgba(255, 255, 255, 0.95); border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 24px; text-align: center;">
          <div style="font-size: 32px; font-weight: 800; color: #3b82f6; margin-bottom: 8px;">94</div>
          <div style="font-size: 12px; color: #64748b; font-weight: 600; text-transform: uppercase;">Active</div>
        </div>
        <div style="background: rgba(255, 255, 255, 0.95); border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 24px; text-align: center;">
          <div style="font-size: 32px; font-weight: 800; color: #f59e0b; margin-bottom: 8px;">${{ revenueData.totalRevenue.toLocaleString() }}</div>
          <div style="font-size: 12px; color: #64748b; font-weight: 600; text-transform: uppercase;">Monthly Revenue</div>
        </div>
        <div style="background: rgba(255, 255, 255, 0.95); border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 24px; text-align: center;">
          <div style="font-size: 32px; font-weight: 800; color: #8b5cf6; margin-bottom: 8px;">342</div>
          <div style="font-size: 12px; color: #64748b; font-weight: 600; text-transform: uppercase;">Services</div>
        </div>
      </div>
    </div>

    <!-- Client Management Content -->
    <div style="padding: 0 32px 32px;">
      <div style="background: rgba(255, 255, 255, 0.95); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        
        <!-- Client Search & Filters -->
        <div style="background: rgba(248, 250, 252, 0.8); padding: 20px 24px; border-bottom: 1px solid rgba(226, 232, 240, 0.6);">
          <div style="display: grid; grid-template-columns: 2fr 1fr 1fr 1fr; gap: 16px;">
            <input placeholder="Search clients by name, email, or company..." style="padding: 12px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; font-size: 14px;" />
            <select style="padding: 12px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; background: white;">
              <option>All Status</option>
              <option>Active</option>
              <option>Suspended</option>
              <option>Inactive</option>
            </select>
            <select style="padding: 12px 16px; border: 1px solid rgba(209, 213, 219, 0.8); border-radius: 8px; background: white;">
              <option>All Groups</option>
              <option>Premium</option>
              <option>Standard</option>
              <option>Basic</option>
            </select>
            <button style="background: linear-gradient(135deg, #3b82f6, #1e40af); color: white; border: none; border-radius: 8px; padding: 12px 20px; font-weight: 600; cursor: pointer;">🔍 Search</button>
          </div>
        </div>
        
        <!-- Clients Table -->
        <div style="max-height: 600px; overflow-y: auto;">
          <div style="display: grid; grid-template-columns: 250px 200px 150px 120px 120px 150px 100px; gap: 20px; padding: 16px 24px; background: rgba(248, 250, 252, 0.9); border-bottom: 1px solid rgba(226, 232, 240, 0.6); font-size: 12px; font-weight: 700; color: #64748b; text-transform: uppercase; letter-spacing: 0.5px;">
            <div>CLIENT</div>
            <div>COMPANY</div>
            <div>STATUS</div>
            <div>SERVICES</div>
            <div>REVENUE</div>
            <div>LAST LOGIN</div>
            <div>ACTIONS</div>
          </div>
          
          <!-- Sample Client Rows -->
          <div v-for="n in 10" :key="n" style="display: grid; grid-template-columns: 250px 200px 150px 120px 120px 150px 100px; gap: 20px; padding: 20px 24px; border-bottom: 1px solid rgba(226, 232, 240, 0.4); transition: all 0.2s ease; cursor: pointer;" @mouseover="this.style.background='rgba(59, 130, 246, 0.03)'" @mouseout="this.style.background='transparent'">
            
            <div style="display: flex; align-items: center; gap: 12px;">
              <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #3b82f6, #1e40af); border-radius: 10px; display: flex; align-items: center; justify-content: center; color: white; font-weight: 700; font-size: 14px;">
                {{ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[n-1] }}
              </div>
              <div>
                <div style="font-weight: 700; color: #0f172a; font-size: 14px; margin-bottom: 2px;">Client {{ n }}</div>
                <div style="font-size: 12px; color: #64748b;">client{{ n }}@example.com</div>
              </div>
            </div>
            
            <div style="font-weight: 600; color: #374151; font-size: 14px;">Company {{ n }} Ltd</div>
            
            <div>
              <span style="background: rgba(16, 185, 129, 0.1); color: #059669; padding: 6px 12px; border-radius: 12px; font-size: 11px; font-weight: 700; text-transform: uppercase;">Active</span>
            </div>
            
            <div style="text-align: center; font-weight: 600; color: #374151;">{{ 2 + (n % 5) }}</div>
            
            <div style="font-weight: 700; color: #10b981;">${{ (150 + n * 50).toLocaleString() }}</div>
            
            <div style="font-size: 12px; color: #64748b;">{{ n }} hours ago</div>
            
            <div style="display: flex; gap: 4px;">
              <button style="background: rgba(59, 130, 246, 0.1); color: #3b82f6; border: 1px solid rgba(59, 130, 246, 0.2); border-radius: 6px; padding: 6px; cursor: pointer; font-size: 12px;">👁️</button>
              <button style="background: rgba(139, 92, 246, 0.1); color: #8b5cf6; border: 1px solid rgba(139, 92, 246, 0.2); border-radius: 6px; padding: 6px; cursor: pointer; font-size: 12px;">✏️</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- SERVER MANAGEMENT SYSTEM -->
  <div v-else-if="view === 'servers'" style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; min-height: 100vh; width: 100vw; margin: 0; padding: 0; position: fixed; top: 0; left: 0; overflow-y: auto;">
    
    <!-- Server Management Header -->
    <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-bottom: 1px solid rgba(226, 232, 240, 0.8); padding: 16px 32px; display: flex; justify-content: space-between; align-items: center;">
      <div style="display: flex; align-items: center; gap: 16px;">
        <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #8b5cf6, #7c3aed); border-radius: 12px; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 12px rgba(139, 92, 246, 0.4);">
          <span style="font-size: 18px; color: white;">🖥️</span>
        </div>
        <div>
          <h1 style="margin: 0; font-size: 24px; font-weight: 700; color: #0f172a;">Server Management</h1>
          <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">cPanel & WHM Administration</p>
        </div>
      </div>
      
      <div style="display: flex; gap: 12px;">
        <button @click="refreshServerData" style="background: linear-gradient(135deg, #8b5cf6, #7c3aed); color: white; border: none; border-radius: 8px; padding: 12px 24px; font-weight: 600; cursor: pointer; display: flex; align-items: center; gap: 8px;">
          <span>🔄</span>
          Refresh
        </button>
        <button @click="view = 'dashboard'" style="background: rgba(107, 114, 128, 0.1); color: #6b7280; border: 1px solid rgba(107, 114, 128, 0.2); border-radius: 8px; padding: 12px 20px; font-weight: 600; cursor: pointer;">← Back</button>
      </div>
    </div>

    <!-- Server Quick Actions -->
    <div style="padding: 20px 32px; background: rgba(255, 255, 255, 0.6);">
      <div style="display: flex; gap: 12px; flex-wrap: wrap;">
        <button @click="executeServerAction('disk-usage')" style="background: rgba(59, 130, 246, 0.1); color: #3b82f6; border: 1px solid rgba(59, 130, 246, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; font-weight: 600; display: flex; align-items: center; gap: 6px;">💾 Disk Usage</button>
        <button @click="executeServerAction('system-load')" style="background: rgba(16, 185, 129, 0.1); color: #059669; border: 1px solid rgba(16, 185, 129, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; font-weight: 600; display: flex; align-items: center; gap: 6px;">📊 System Load</button>
        <button @click="executeServerAction('account-list')" style="background: rgba(245, 158, 11, 0.1); color: #d97706; border: 1px solid rgba(245, 158, 11, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; font-weight: 600; display: flex; align-items: center; gap: 6px;">👥 Accounts</button>
        <button @click="executeServerAction('email-accounts')" style="background: rgba(139, 92, 246, 0.1); color: #8b5cf6; border: 1px solid rgba(139, 92, 246, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; font-weight: 600; display: flex; align-items: center; gap: 6px;">📧 Email</button>
        <button @click="executeServerAction('ssl-status')" style="background: rgba(239, 68, 68, 0.1); color: #dc2626; border: 1px solid rgba(239, 68, 68, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; font-weight: 600; display: flex; align-items: center; gap: 6px;">🔒 SSL Status</button>
        <button @click="executeServerAction('backup-status')" style="background: rgba(6, 182, 212, 0.1); color: #0891b2; border: 1px solid rgba(6, 182, 212, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; font-weight: 600; display: flex; align-items: center; gap: 6px;">💿 Backups</button>
        <button @click="view = 'AI'" style="background: rgba(245, 158, 11, 0.1); color: #d97706; border: 1px solid rgba(245, 158, 11, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; font-weight: 600; display: flex; align-items: center; gap: 6px;">🤖 AI Assistant</button>
      </div>
    </div>

    <!-- Server Dashboard Grid -->
    <div style="padding: 0 32px 32px; display: grid; grid-template-columns: 1fr 1fr; gap: 32px;">
      
      <!-- System Resources -->
      <div style="background: rgba(255, 255, 255, 0.95); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        <div style="padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6);">
          <h3 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a; display: flex; align-items: center; gap: 12px;">
            <span style="font-size: 20px;">📊</span>
            System Resources
          </h3>
        </div>
        <div style="padding: 24px 28px;">
          <div style="display: grid; gap: 20px;">
            
            <!-- CPU Usage -->
            <div>
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                <span style="font-weight: 600; color: #374151; font-size: 14px;">CPU Usage</span>
                <span style="font-weight: 700; color: #10b981; font-size: 14px;">{{ hostingSystemInfo.cpuUsage || '23%' }}</span>
              </div>
              <div style="width: 100%; height: 8px; background: rgba(226, 232, 240, 0.5); border-radius: 4px; overflow: hidden;">
                <div style="height: 100%; background: linear-gradient(90deg, #10b981, #059669); width: {{ hostingSystemInfo.cpuUsage || '23%' }}; border-radius: 4px; transition: all 0.3s ease;"></div>
              </div>
            </div>
            
            <!-- Memory Usage -->
            <div>
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                <span style="font-weight: 600; color: #374151; font-size: 14px;">Memory Usage</span>
                <span style="font-weight: 700; color: #f59e0b; font-size: 14px;">{{ hostingSystemInfo.memoryUsage || '67%' }}</span>
              </div>
              <div style="width: 100%; height: 8px; background: rgba(226, 232, 240, 0.5); border-radius: 4px; overflow: hidden;">
                <div style="height: 100%; background: linear-gradient(90deg, #f59e0b, #d97706); width: {{ hostingSystemInfo.memoryUsage || '67%' }}; border-radius: 4px; transition: all 0.3s ease;"></div>
              </div>
            </div>
            
            <!-- Disk Usage -->
            <div>
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                <span style="font-weight: 600; color: #374151; font-size: 14px;">Disk Usage</span>
                <span style="font-weight: 700; color: #3b82f6; font-size: 14px;">{{ hostingSystemInfo.diskUsage || '45%' }}</span>
              </div>
              <div style="width: 100%; height: 8px; background: rgba(226, 232, 240, 0.5); border-radius: 4px; overflow: hidden;">
                <div style="height: 100%; background: linear-gradient(90deg, #3b82f6, #1e40af); width: {{ hostingSystemInfo.diskUsage || '45%' }}; border-radius: 4px; transition: all 0.3s ease;"></div>
              </div>
            </div>
            
            <!-- Network I/O -->
            <div>
              <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                <span style="font-weight: 600; color: #374151; font-size: 14px;">Network I/O</span>
                <span style="font-weight: 700; color: #8b5cf6; font-size: 14px;">{{ hostingSystemInfo.networkIO || '12%' }}</span>
              </div>
              <div style="width: 100%; height: 8px; background: rgba(226, 232, 240, 0.5); border-radius: 4px; overflow: hidden;">
                <div style="height: 100%; background: linear-gradient(90deg, #8b5cf6, #7c3aed); width: {{ hostingSystemInfo.networkIO || '12%' }}; border-radius: 4px; transition: all 0.3s ease;"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Quick Stats -->
      <div style="background: rgba(255, 255, 255, 0.95); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        <div style="padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6);">
          <h3 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a; display: flex; align-items: center; gap: 12px;">
            <span style="font-size: 20px;">⚡</span>
            Server Statistics
          </h3>
        </div>
        <div style="padding: 24px 28px;">
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
            
            <div style="text-align: center; padding: 16px; background: rgba(59, 130, 246, 0.05); border-radius: 12px; border: 1px solid rgba(59, 130, 246, 0.1);">
              <div style="font-size: 24px; font-weight: 800; color: #3b82f6; margin-bottom: 4px;">{{ hostingSummary.totalAccounts || 24 }}</div>
              <div style="font-size: 11px; color: #64748b; font-weight: 600; text-transform: uppercase;">Accounts</div>
            </div>
            
            <div style="text-align: center; padding: 16px; background: rgba(16, 185, 129, 0.05); border-radius: 12px; border: 1px solid rgba(16, 185, 129, 0.1);">
              <div style="font-size: 24px; font-weight: 800; color: #10b981; margin-bottom: 4px;">{{ hostingSystemInfo.uptime || '99.9%' }}</div>
              <div style="font-size: 11px; color: #64748b; font-weight: 600; text-transform: uppercase;">Uptime</div>
            </div>
            
            <div style="text-align: center; padding: 16px; background: rgba(245, 158, 11, 0.05); border-radius: 12px; border: 1px solid rgba(245, 158, 11, 0.1);">
              <div style="font-size: 24px; font-weight: 800; color: #f59e0b; margin-bottom: 4px;">{{ hostingSummary.totalDomains || 156 }}</div>
              <div style="font-size: 11px; color: #64748b; font-weight: 600; text-transform: uppercase;">Domains</div>
            </div>
            
            <div style="text-align: center; padding: 16px; background: rgba(139, 92, 246, 0.05); border-radius: 12px; border: 1px solid rgba(139, 92, 246, 0.1);">
              <div style="font-size: 24px; font-weight: 800; color: #8b5cf6; margin-bottom: 4px;">{{ hostingSummary.activeServices || 73 }}</div>
              <div style="font-size: 11px; color: #64748b; font-weight: 600; text-transform: uppercase;">Active Services</div>
            </div>
          </div>
          
          <!-- Server Details -->
          <div style="margin-top: 24px; padding-top: 20px; border-top: 1px solid rgba(226, 232, 240, 0.6);">
            <div style="display: grid; gap: 12px; font-size: 13px;">
              <div style="display: flex; justify-content: space-between;">
                <span style="color: #64748b; font-weight: 600;">Server Load</span>
                <span style="font-weight: 700; color: #10b981;">{{ hostingSystemInfo.serverLoad || '0.65' }}</span>
              </div>
              <div style="display: flex; justify-content: space-between;">
                <span style="color: #64748b; font-weight: 600;">Available RAM</span>
                <span style="font-weight: 700; color: #3b82f6;">{{ hostingSystemInfo.availableRAM || '5.2 GB' }}</span>
              </div>
              <div style="display: flex; justify-content: space-between;">
                <span style="color: #64748b; font-weight: 600;">Free Disk Space</span>
                <span style="font-weight: 700; color: #f59e0b;">{{ hostingSystemInfo.freeDiskSpace || '234 GB' }}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Account Management Table -->
    <div style="padding: 0 32px 32px;">
      <div style="background: rgba(255, 255, 255, 0.95); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        <div style="padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6); display: flex; justify-content: space-between; align-items: center;">
          <h3 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a;">cPanel Accounts</h3>
          <button @click="createCpanelAccount" style="background: linear-gradient(135deg, #10b981, #059669); color: white; border: none; border-radius: 8px; padding: 8px 16px; font-weight: 600; cursor: pointer; font-size: 12px;">+ New Account</button>
        </div>
        
        <div style="max-height: 400px; overflow-y: auto;">
          <div style="display: grid; grid-template-columns: 200px 200px 150px 120px 120px 100px; gap: 20px; padding: 16px 24px; background: rgba(248, 250, 252, 0.9); border-bottom: 1px solid rgba(226, 232, 240, 0.6); font-size: 12px; font-weight: 700; color: #64748b; text-transform: uppercase;">
            <div>USERNAME</div>
            <div>DOMAIN</div>
            <div>DISK USAGE</div>
            <div>BANDWIDTH</div>
            <div>STATUS</div>
            <div>ACTIONS</div>
          </div>
          
          <!-- Sample cPanel Account Rows -->
          <div v-if="cpanelAccounts.length === 0" style="text-align: center; color: #64748b; padding: 40px;">
            <span style="font-size: 32px; margin-bottom: 12px; display: block;">🔄</span>
            <p>Loading cPanel accounts...</p>
          </div>
          <div v-for="(account, index) in cpanelAccounts.slice(0, 8)" :key="`cpanel-${index}`" style="display: grid; grid-template-columns: 200px 200px 150px 120px 120px 100px; gap: 20px; padding: 16px 24px; border-bottom: 1px solid rgba(226, 232, 240, 0.4); transition: all 0.2s ease; cursor: pointer;" @mouseover="this.style.background='rgba(139, 92, 246, 0.03)'" @mouseout="this.style.background='transparent'">
            
            <div style="font-family: 'SF Mono', monospace; font-weight: 700; color: #0f172a; font-size: 14px;">{{ account.Username || 'N/A' }}</div>
            <div style="font-weight: 600; color: #374151;">{{ account.Domain || 'N/A' }}</div>
            <div style="font-size: 13px; color: #64748b;">{{ getDiskUsageDisplay(account) }}</div>
            <div style="font-size: 13px; color: #64748b;">{{ getBandwidthDisplay(account) }}</div>
            <div>
              <span :style="{ 
                background: account.Status === 'Active' ? 'rgba(16, 185, 129, 0.1)' : 'rgba(239, 68, 68, 0.1)', 
                color: account.Status === 'Active' ? '#059669' : '#dc2626', 
                padding: '4px 8px', 
                borderRadius: '6px', 
                fontSize: '11px', 
                fontWeight: '700' 
              }">{{ account.Status || 'Unknown' }}</span>
            </div>
            <div style="display: flex; gap: 4px;">
              <button @click="manageAccount(account)" style="background: rgba(59, 130, 246, 0.1); color: #3b82f6; border: 1px solid rgba(59, 130, 246, 0.2); border-radius: 4px; padding: 4px; cursor: pointer; font-size: 10px;" title="Manage Account">⚙️</button>
              <button @click="suspendAccount(account)" style="background: rgba(239, 68, 68, 0.1); color: #dc2626; border: 1px solid rgba(239, 68, 68, 0.2); border-radius: 4px; padding: 4px; cursor: pointer; font-size: 10px;" title="Suspend Account">⏸️</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- TICKETS VIEW -->
  <div v-else-if="view === 'tickets'" style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); font-family: 'Inter', sans-serif; min-height: 100vh; padding: 20px;">
    <div style="max-width: 1200px; margin: 0 auto;">
      <!-- Header -->
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
        <div>
          <h1 style="margin: 0; font-size: 28px; font-weight: 700; color: #0f172a;">🎫 Support Tickets</h1>
          <p style="margin: 0; color: #64748b; font-size: 14px;">Manage customer support requests</p>
        </div>
        <div style="display: flex; gap: 12px;">
          <button @click="view = 'dashboard'" style="background: rgba(71, 85, 105, 0.1); color: #475569; border: 1px solid rgba(71, 85, 105, 0.2); border-radius: 8px; padding: 10px 16px; cursor: pointer; font-weight: 600;">← Back to Dashboard</button>
          <button @click="createTicket" style="background: linear-gradient(135deg, #3b82f6, #1e40af); color: white; border: none; border-radius: 8px; padding: 10px 20px; cursor: pointer; font-weight: 600;">+ New Ticket</button>
        </div>
      </div>

      <!-- Ticket List -->
      <div v-if="currentTicketView === 'list'" style="background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.05); overflow: hidden;">
        <div style="padding: 20px; border-bottom: 1px solid #e2e8f0;">
          <div style="display: grid; grid-template-columns: 100px 1fr 150px 120px 120px 100px; gap: 16px; font-size: 12px; font-weight: 700; color: #64748b; text-transform: uppercase;">
            <div>ID</div>
            <div>Subject & Client</div>
            <div>Category</div>
            <div>Priority</div>
            <div>Status</div>
            <div>Actions</div>
          </div>
        </div>
        <div style="max-height: 600px; overflow-y: auto;">
          <div v-for="ticket in tickets" :key="ticket.id" style="display: grid; grid-template-columns: 100px 1fr 150px 120px 120px 100px; gap: 16px; padding: 16px 20px; border-bottom: 1px solid #f1f5f9; cursor: pointer; transition: all 0.2s;" @click="viewTicket(ticket)" @mouseover="this.style.background='#f8fafc'" @mouseout="this.style.background='white'">
            <div style="font-family: monospace; font-weight: 700; color: #3b82f6;">#{{ ticket.id }}</div>
            <div>
              <div style="font-weight: 600; color: #0f172a; margin-bottom: 4px;">{{ ticket.subject }}</div>
              <div style="font-size: 12px; color: #64748b;">{{ ticket.client }} • {{ ticket.created }}</div>
            </div>
            <div style="font-size: 13px; color: #64748b;">{{ ticket.category }}</div>
            <div>
              <span :style="`background: ${ticket.priority === 'High' ? '#fecaca' : ticket.priority === 'Medium' ? '#fed7aa' : '#d1fae5'}; color: ${ticket.priority === 'High' ? '#dc2626' : ticket.priority === 'Medium' ? '#ea580c' : '#059669'}; padding: 4px 8px; border-radius: 6px; font-size: 11px; font-weight: 700;`">{{ ticket.priority }}</span>
            </div>
            <div>
              <span :style="`background: ${ticket.status === 'Open' ? '#dbeafe' : ticket.status === 'In Progress' ? '#fef3c7' : '#d1fae5'}; color: ${ticket.status === 'Open' ? '#2563eb' : ticket.status === 'In Progress' ? '#d97706' : '#059669'}; padding: 4px 8px; border-radius: 6px; font-size: 11px; font-weight: 700;`">{{ ticket.status }}</span>
            </div>
            <div>
              <button style="background: rgba(59, 130, 246, 0.1); color: #3b82f6; border: 1px solid rgba(59, 130, 246, 0.2); border-radius: 4px; padding: 6px 12px; cursor: pointer; font-size: 11px; font-weight: 600;">View</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Create Ticket Form -->
      <div v-else-if="currentTicketView === 'create'" style="background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.05); padding: 24px;">
        <h3 style="margin: 0 0 20px 0; font-size: 20px; font-weight: 700; color: #0f172a;">Create New Ticket</h3>
        <div style="display: grid; gap: 16px;">
          <div>
            <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 600; color: #374151;">Subject</label>
            <input v-model="ticketForm.subject" placeholder="Brief description of the issue" style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;" />
          </div>
          <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 16px;">
            <div>
              <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 600; color: #374151;">Category</label>
              <select v-model="ticketForm.category" style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                <option value="technical">Technical</option>
                <option value="billing">Billing</option>
                <option value="general">General</option>
                <option value="support">Support</option>
              </select>
            </div>
            <div>
              <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 600; color: #374151;">Priority</label>
              <select v-model="ticketForm.priority" style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;">
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
              </select>
            </div>
            <div>
              <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 600; color: #374151;">Client ID</label>
              <input v-model="ticketForm.clientId" placeholder="Optional" style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px;" />
            </div>
          </div>
          <div>
            <label style="display: block; margin-bottom: 6px; font-size: 14px; font-weight: 600; color: #374151;">Message</label>
            <textarea v-model="ticketForm.message" placeholder="Detailed description of the issue" style="width: 100%; padding: 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 14px; min-height: 120px; resize: vertical;"></textarea>
          </div>
          <div style="display: flex; gap: 12px; justify-content: flex-end;">
            <button @click="currentTicketView = 'list'" style="background: rgba(71, 85, 105, 0.1); color: #475569; border: 1px solid rgba(71, 85, 105, 0.2); border-radius: 8px; padding: 10px 20px; cursor: pointer; font-weight: 600;">Cancel</button>
            <button @click="submitTicket" style="background: linear-gradient(135deg, #10b981, #059669); color: white; border: none; border-radius: 8px; padding: 10px 20px; cursor: pointer; font-weight: 600;">Create Ticket</button>
          </div>
        </div>
      </div>

      <!-- View Ticket -->
      <div v-else-if="currentTicketView === 'view' && selectedTicket" style="background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.05); padding: 24px;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
          <h3 style="margin: 0; font-size: 20px; font-weight: 700; color: #0f172a;">Ticket #{{ selectedTicket.id }}</h3>
          <button @click="currentTicketView = 'list'" style="background: rgba(71, 85, 105, 0.1); color: #475569; border: 1px solid rgba(71, 85, 105, 0.2); border-radius: 8px; padding: 8px 16px; cursor: pointer; font-weight: 600;">← Back to List</button>
        </div>
        <div style="border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px;">
          <h4 style="margin: 0 0 16px 0; font-size: 18px; font-weight: 600; color: #0f172a;">{{ selectedTicket.subject }}</h4>
          <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 16px; margin-bottom: 20px; padding: 16px; background: #f8fafc; border-radius: 8px;">
            <div><strong>Client:</strong> {{ selectedTicket.client }}</div>
            <div><strong>Priority:</strong> <span :style="`color: ${selectedTicket.priority === 'High' ? '#dc2626' : selectedTicket.priority === 'Medium' ? '#ea580c' : '#059669'}`">{{ selectedTicket.priority }}</span></div>
            <div><strong>Status:</strong> <span :style="`color: ${selectedTicket.status === 'Open' ? '#2563eb' : selectedTicket.status === 'In Progress' ? '#d97706' : '#059669'}`">{{ selectedTicket.status }}</span></div>
            <div><strong>Created:</strong> {{ selectedTicket.created }}</div>
          </div>
          <div style="background: #f9fafb; padding: 16px; border-radius: 8px; border-left: 4px solid #3b82f6;">
            <p style="margin: 0; color: #374151; line-height: 1.6;">{{ selectedTicket.message }}</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- CLIENTS VIEW -->
  <div v-else-if="view === 'clients'" style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); font-family: 'Inter', sans-serif; min-height: 100vh; padding: 20px;">
    <div style="max-width: 1200px; margin: 0 auto;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
        <div>
          <h1 style="margin: 0; font-size: 28px; font-weight: 700; color: #0f172a;">👥 Client Management</h1>
          <p style="margin: 0; color: #64748b; font-size: 14px;">Manage your customer accounts</p>
        </div>
        <div style="display: flex; gap: 12px;">
          <button @click="view = 'dashboard'" style="background: rgba(71, 85, 105, 0.1); color: #475569; border: 1px solid rgba(71, 85, 105, 0.2); border-radius: 8px; padding: 10px 16px; cursor: pointer; font-weight: 600;">← Back to Dashboard</button>
          <button @click="addClient" style="background: linear-gradient(135deg, #10b981, #059669); color: white; border: none; border-radius: 8px; padding: 10px 20px; cursor: pointer; font-weight: 600;">+ Add Client</button>
        </div>
      </div>
      
      <div style="background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.05); padding: 20px; text-align: center;">
        <div style="font-size: 48px; margin-bottom: 16px;">👥</div>
        <h3 style="margin: 0 0 8px 0; color: #64748b;">Client Management</h3>
        <p style="margin: 0; color: #94a3b8;">Client management features will be implemented here</p>
      </div>
    </div>
  </div>

  <!-- SERVERS VIEW -->
  <div v-else-if="view === 'servers'" style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); font-family: 'Inter', sans-serif; min-height: 100vh; padding: 20px;">
    <div style="max-width: 1200px; margin: 0 auto;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px;">
        <div>
          <h1 style="margin: 0; font-size: 28px; font-weight: 700; color: #0f172a;">🖥️ Server Management</h1>
          <p style="margin: 0; color: #64748b; font-size: 14px;">Monitor and manage your servers</p>
        </div>
        <button @click="view = 'dashboard'" style="background: rgba(71, 85, 105, 0.1); color: #475569; border: 1px solid rgba(71, 85, 105, 0.2); border-radius: 8px; padding: 10px 16px; cursor: pointer; font-weight: 600;">← Back to Dashboard</button>
      </div>
      
      <div style="background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.05); padding: 20px; text-align: center;">
        <div style="font-size: 48px; margin-bottom: 16px;">🖥️</div>
        <h3 style="margin: 0 0 8px 0; color: #64748b;">Server Management</h3>
        <p style="margin: 0; color: #94a3b8;">Server management features will be implemented here</p>
      </div>
    </div>
  </div>

  <!-- HOSTING DASHBOARD VIEW -->
  <div v-else-if="view === 'hosting'" style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; min-height: 100vh; width: 100vw; margin: 0; padding: 0; position: fixed; top: 0; left: 0; overflow-y: auto;">
    
    <!-- Enhanced Header -->
    <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-bottom: 1px solid rgba(226, 232, 240, 0.8); padding: 16px 32px; display: flex; justify-content: space-between; align-items: center; box-shadow: 0 1px 3px rgba(0,0,0,0.1), 0 1px 2px rgba(0,0,0,0.06);">
      
      <div style="display: flex; align-items: center; gap: 24px;">
        <div style="display: flex; align-items: center; gap: 16px;">
          <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #8b5cf6, #7c3aed); border-radius: 12px; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 12px rgba(139, 92, 246, 0.4);">
            <span style="font-size: 18px; color: white;">🏠</span>
          </div>
          <div>
            <h1 style="margin: 0; font-size: 24px; font-weight: 700; color: #0f172a; letter-spacing: -0.025em;">Hosting Management</h1>
            <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">Real cPanel & Domain Data {{ hostingDataLoaded ? '• Live Data' : '• Loading...' }}</p>
          </div>
        </div>
        
        <!-- Back to Dashboard Button -->
        <button @click="view = 'dashboard'" style="background: rgba(59, 130, 246, 0.1); color: #3b82f6; border: 1px solid rgba(59, 130, 246, 0.2); border-radius: 8px; padding: 8px 16px; font-size: 12px; cursor: pointer; transition: all 0.2s ease; font-weight: 600;">← Dashboard</button>
      </div>
      
      <div style="display: flex; align-items: center; gap: 16px;">
        <!-- Refresh Button -->
        <button 
          @click="loadRealHostingData" 
          :disabled="hostingDataLoading"
          style="background: rgba(16, 185, 129, 0.1); color: #059669; border: 1px solid rgba(16, 185, 129, 0.2); border-radius: 10px; padding: 10px; cursor: pointer; transition: all 0.2s ease; display: flex; align-items: center; justify-content: center;"
          :style="{ opacity: hostingDataLoading ? '0.6' : '1', cursor: hostingDataLoading ? 'not-allowed' : 'pointer' }"
        >
          <span v-if="hostingDataLoading" style="font-size: 16px; animation: spin 1s linear infinite;">⟳</span>
          <span v-else style="font-size: 16px;">🔄</span>
        </button>
      </div>
    </div>

    <!-- Summary Cards -->
    <div style="padding: 32px; display: grid; grid-template-columns: repeat(4, 1fr); gap: 24px;">
      <!-- Accounts Summary -->
      <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); border: 1px solid rgba(226,232,240,0.5); overflow: hidden; text-align: center; padding: 24px;">
        <div style="width: 48px; height: 48px; background: linear-gradient(135deg, #3b82f6, #1e40af); border-radius: 12px; display: flex; align-items: center; justify-content: center; margin: 0 auto 16px; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);">
          <span style="font-size: 20px; color: white;">👥</span>
        </div>
        <div style="font-size: 32px; font-weight: 800; color: #3b82f6; margin-bottom: 8px;">{{ hostingSummary.totalAccounts || '0' }}</div>
        <div style="font-size: 14px; color: #64748b; font-weight: 600; text-transform: uppercase;">cPanel Accounts</div>
        <div style="font-size: 12px; color: #10b981; margin-top: 8px;">{{ hostingAccounts.filter(acc => acc.Status === 'Active').length || '0' }} Active</div>
      </div>

      <!-- Domains Summary -->
      <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); border: 1px solid rgba(226,232,240,0.5); overflow: hidden; text-align: center; padding: 24px;">
        <div style="width: 48px; height: 48px; background: linear-gradient(135deg, #10b981, #059669); border-radius: 12px; display: flex; align-items: center; justify-content: center; margin: 0 auto 16px; box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);">
          <span style="font-size: 20px; color: white;">🌐</span>
        </div>
        <div style="font-size: 32px; font-weight: 800; color: #10b981; margin-bottom: 8px;">{{ hostingSummary.totalDomains || '0' }}</div>
        <div style="font-size: 14px; color: #64748b; font-weight: 600; text-transform: uppercase;">Total Domains</div>
        <div style="font-size: 12px; color: #8b5cf6; margin-top: 8px;">{{ hostingDomains.filter(dom => dom['Domain Type'] === 'main').length || '0' }} Main</div>
      </div>

      <!-- Disk Usage Summary -->
      <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); border: 1px solid rgba(226,232,240,0.5); overflow: hidden; text-align: center; padding: 24px;">
        <div style="width: 48px; height: 48px; background: linear-gradient(135deg, #f59e0b, #d97706); border-radius: 12px; display: flex; align-items: center; justify-content: center; margin: 0 auto 16px; box-shadow: 0 4px 12px rgba(245, 158, 11, 0.4);">
          <span style="font-size: 20px; color: white;">💾</span>
        </div>
        <div style="font-size: 32px; font-weight: 800; color: #f59e0b; margin-bottom: 8px;">{{ hostingSummary.totalDiskUsageGB || '0' }}GB</div>
        <div style="font-size: 14px; color: #64748b; font-weight: 600; text-transform: uppercase;">Disk Usage</div>
        <div style="font-size: 12px; color: #ef4444; margin-top: 8px;">{{ hostingDiskUsage.filter(disk => parseFloat(disk['Disk Blocks Used']) / parseFloat(disk['Disk Blocks Limit']) > 0.8).length || '0' }} High Usage</div>
      </div>

      <!-- Active Services -->
      <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); border: 1px solid rgba(226,232,240,0.5); overflow: hidden; text-align: center; padding: 24px;">
        <div style="width: 48px; height: 48px; background: linear-gradient(135deg, #8b5cf6, #7c3aed); border-radius: 12px; display: flex; align-items: center; justify-content: center; margin: 0 auto 16px; box-shadow: 0 4px 12px rgba(139, 92, 246, 0.4);">
          <span style="font-size: 20px; color: white;">⚡</span>
        </div>
        <div style="font-size: 32px; font-weight: 800; color: #8b5cf6; margin-bottom: 8px;">{{ hostingSummary.activeServices || '0' }}</div>
        <div style="font-size: 14px; color: #64748b; font-weight: 600; text-transform: uppercase;">Active Services</div>
        <div style="font-size: 12px; color: #10b981; margin-top: 8px;">{{ hostingSystemInfo.uptime || '99.9%' }} Uptime</div>
      </div>
    </div>

    <!-- Data Tables -->
    <div style="padding: 0 32px 32px; display: grid; grid-template-columns: 1fr 1fr; gap: 24px;">
      
      <!-- cPanel Accounts -->
      <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        <div style="padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6); display: flex; align-items: center; justify-content: space-between;">
          <div>
            <h3 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a;">cPanel Accounts</h3>
            <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">{{ hostingAccounts.length || 0 }} total accounts</p>
          </div>
          <div style="background: linear-gradient(135deg, #3b82f6, #1e40af); color: white; border: none; border-radius: 8px; padding: 8px 16px; font-size: 12px; font-weight: 600;">{{ hostingDataLoaded ? 'Live' : 'Loading' }}</div>
        </div>
        <div style="max-height: 400px; overflow-y: auto;">
          <div v-if="hostingAccounts.length === 0" style="text-align: center; color: #64748b; padding: 40px;">
            <span style="font-size: 32px; margin-bottom: 12px; display: block;">🏠</span>
            <p>{{ hostingDataLoading ? 'Loading accounts...' : 'No cPanel accounts found' }}</p>
          </div>
          <div v-for="account in hostingAccounts.slice(0, 10)" :key="account.Username" style="display: flex; align-items: center; gap: 12px; padding: 16px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.4); cursor: pointer; transition: all 0.2s ease;" @mouseover="this.style.background='rgba(59, 130, 246, 0.05)'" @mouseout="this.style.background='transparent'">
            <div style="width: 8px; height: 8px; border-radius: 50%;" :style="{ background: account.Status === 'Active' ? '#10b981' : '#f59e0b' }"></div>
            <div style="flex: 1;">
              <div style="font-weight: 600; color: #0f172a; font-size: 14px; margin-bottom: 2px;">{{ account.Domain || 'Unknown Domain' }}</div>
              <div style="font-size: 12px; color: #64748b;">{{ account.Username || 'Unknown User' }} • {{ account.Email || 'No Email' }}</div>
            </div>
            <div :style="{ background: account.Status === 'Active' ? 'rgba(16, 185, 129, 0.1)' : 'rgba(245, 158, 11, 0.1)', color: account.Status === 'Active' ? '#059669' : '#d97706', padding: '4px 8px', borderRadius: '6px', fontSize: '10px', fontWeight: '700' }">{{ account.Status || 'Unknown' }}</div>
          </div>
        </div>
      </div>

      <!-- Domains -->
      <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        <div style="padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6); display: flex; align-items: center; justify-content: space-between;">
          <div>
            <h3 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a;">Domains</h3>
            <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">{{ hostingDomains.length || 0 }} total domains</p>
          </div>
          <div style="background: linear-gradient(135deg, #10b981, #059669); color: white; border: none; border-radius: 8px; padding: 8px 16px; font-size: 12px; font-weight: 600;">{{ hostingDataLoaded ? 'Live' : 'Loading' }}</div>
        </div>
        <div style="max-height: 400px; overflow-y: auto;">
          <div v-if="hostingDomains.length === 0" style="text-align: center; color: #64748b; padding: 40px;">
            <span style="font-size: 32px; margin-bottom: 12px; display: block;">🌐</span>
            <p>{{ hostingDataLoading ? 'Loading domains...' : 'No domains found' }}</p>
          </div>
          <div v-for="domain in hostingDomains.slice(0, 10)" :key="domain.Domain" style="display: flex; align-items: center; gap: 12px; padding: 16px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.4); cursor: pointer; transition: all 0.2s ease;" @mouseover="this.style.background='rgba(16, 185, 129, 0.05)'" @mouseout="this.style.background='transparent'">
            <div style="width: 8px; height: 8px; border-radius: 50%; background: #10b981;"></div>
            <div style="flex: 1;">
              <div style="font-weight: 600; color: #0f172a; font-size: 14px; margin-bottom: 2px;">{{ domain.Domain || 'Unknown Domain' }}</div>
              <div style="font-size: 12px; color: #64748b;">{{ domain['User Owner'] || 'Unknown User' }} • {{ domain['Domain Type'] || 'unknown' }}</div>
            </div>
            <div style="background: rgba(139, 92, 246, 0.1); color: #8b5cf6; padding: 4px 8px; border-radius: 6px; font-size: 10px; font-weight: 700;">{{ domain['Domain Type'] || 'UNKNOWN' }}</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Disk Usage Overview -->
    <div style="padding: 0 32px 32px;">
      <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border-radius: 16px; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05); border: 1px solid rgba(226,232,240,0.5); overflow: hidden;">
        <div style="padding: 24px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.6); display: flex; align-items: center; justify-content: space-between;">
          <div>
            <h3 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a;">Disk Usage by Account</h3>
            <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">{{ hostingDiskUsage.length || 0 }} accounts monitored</p>
          </div>
          <div style="background: linear-gradient(135deg, #f59e0b, #d97706); color: white; border: none; border-radius: 8px; padding: 8px 16px; font-size: 12px; font-weight: 600;">{{ hostingDataLoaded ? 'Live' : 'Loading' }}</div>
        </div>
        <div style="max-height: 400px; overflow-y: auto;">
          <div v-if="hostingDiskUsage.length === 0" style="text-align: center; color: #64748b; padding: 40px;">
            <span style="font-size: 32px; margin-bottom: 12px; display: block;">💾</span>
            <p>{{ hostingDataLoading ? 'Loading disk usage...' : 'No disk usage data found' }}</p>
          </div>
          <div v-for="usage in hostingDiskUsage.slice(0, 10)" :key="usage.User" style="display: grid; grid-template-columns: 1fr 1fr 1fr 80px; gap: 16px; align-items: center; padding: 16px 28px; border-bottom: 1px solid rgba(226, 232, 240, 0.4); transition: all 0.2s ease;" @mouseover="this.style.background='rgba(245, 158, 11, 0.05)'" @mouseout="this.style.background='transparent'">
            <div>
              <div style="font-weight: 600; color: #0f172a; font-size: 14px; margin-bottom: 2px;">{{ usage.User || 'Unknown User' }}</div>
              <div style="font-size: 12px; color: #64748b;">{{ usage['Inodes Used'] || 0 }} inodes used</div>
            </div>
            <div style="text-align: center;">
              <div style="font-size: 12px; color: #64748b; margin-bottom: 4px;">Used</div>
              <div style="font-weight: 600; color: #f59e0b; font-size: 14px;">{{ Math.round(parseFloat(usage['Disk Blocks Used'] || 0) / 1024) || 0 }}MB</div>
            </div>
            <div style="text-align: center;">
              <div style="font-size: 12px; color: #64748b; margin-bottom: 4px;">Limit</div>
              <div style="font-weight: 600; color: #64748b; font-size: 14px;">{{ Math.round(parseFloat(usage['Disk Blocks Limit'] || 0) / 1024) || 0 }}MB</div>
            </div>
            <div style="text-align: center;">
              <div :style="{ 
                background: ((parseFloat(usage['Disk Blocks Used'] || 0) / parseFloat(usage['Disk Blocks Limit'] || 1)) * 100) > 80 ? 'rgba(239, 68, 68, 0.1)' : 'rgba(16, 185, 129, 0.1)', 
                color: ((parseFloat(usage['Disk Blocks Used'] || 0) / parseFloat(usage['Disk Blocks Limit'] || 1)) * 100) > 80 ? '#dc2626' : '#059669', 
                padding: '4px 8px', 
                borderRadius: '6px', 
                fontSize: '10px', 
                fontWeight: '700' 
              }">
                {{ Math.round((parseFloat(usage['Disk Blocks Used'] || 0) / parseFloat(usage['Disk Blocks Limit'] || 1)) * 100) || 0 }}%
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>
  
  <style>
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }
  </style>

<script>
export default {
  data() {
    return {
      title: 'Admin Dashboard',
      subtitle: 'System Management',
      view: 'dashboard',
      aiResponse: [],
      userMessage: '',
      tokens: {},
      apiResponse: [],
      messageHistory: '',
      historyLog: '',
      pending_functions: [],
      acknowledged_functions: [],
      ticketIdInput: '',
      ticketMessage: '',

      loading: false,
      dots: '',
      intervalId: null,

      clientId: '',
      product: '',
      server: '',

      satisfaction: '',
      priority: '',

      // Ticket lookup functionality
      ticketMode: 'submit', // 'submit' or 'lookup'
      lookupTicketId: '',
      ticketInfo: null,
      lookupLoading: false,
      lookupError: '',

      id: '',

      // ENHANCED TICKETING SYSTEM
      currentTicketView: 'list', // 'list', 'create', 'edit', 'view'
      tickets: [],
      selectedTicket: null,
      ticketFilters: {
        status: 'all',
        priority: 'all',
        category: 'all'
      },
      ticketForm: {
        subject: '',
        message: '',
        category: 'general',
        priority: 'medium',
        clientId: '',
        attachments: [],
        tags: []
      },
      
      // WHMCS DATA
      clients: [],
      invoices: [],
      products: [],
      domains: [],
      orders: [],
      
      // CPANEL DATA
      cpanelAccounts: [],
      emailAccounts: [],
      databases: [],
      sslCertificates: [],
      backups: [],
      
      // UI STATE
      sidebarCollapsed: false,
      activeWidget: null,
      notifications: [],
      searchQuery: '',
      bulkSelectedItems: [],
      dashboardWidgets: [
        { id: 'tickets', title: 'Recent Tickets', type: 'tickets', enabled: true },
        { id: 'clients', title: 'Client Overview', type: 'clients', enabled: true },
        { id: 'server', title: 'Server Status', type: 'server', enabled: true },
        { id: 'revenue', title: 'Revenue', type: 'revenue', enabled: true }
      ],
      
      // QUICK ACTIONS
      quickActions: [
        { id: 'create-ticket', label: 'New Ticket', icon: '🎫', color: '#3b82f6' },
        { id: 'add-client', label: 'Add Client', icon: '👤', color: '#10b981' },
        { id: 'create-invoice', label: 'Invoice', icon: '💰', color: '#f59e0b' },
        { id: 'backup-account', label: 'Backup', icon: '💾', color: '#8b5cf6' },
        { id: 'check-ssl', label: 'SSL Check', icon: '🔒', color: '#ef4444' },
        { id: 'system-status', label: 'System', icon: '⚡', color: '#06b6d4' }
      ],
      
      // ADVANCED FEATURES
      recentActivities: [],
      favoriteClients: [],
      systemAlerts: [],
      performanceMetrics: {},
      userPreferences: {
        theme: 'light',
        defaultView: 'dashboard',
        autoRefresh: true,
        notifications: true
      },

      // NEW DATA PROPERTIES FOR ENHANCED FEATURES
      
      // Ticketing System
      tickets: [],
      currentTicketView: 'list', // 'list', 'create', 'edit', 'view'
      selectedTicket: null,
      ticketForm: {
        subject: '',
        message: '',
        category: 'general',
        priority: 'medium',
        clientId: '',
        attachments: [],
        tags: []
      },
      ticketTagInput: '',
      ticketFilters: {
        status: 'all',
        priority: 'all',
        category: 'all'
      },
      searchQuery: '',

      // Client Management
      clients: [],
      currentClientView: 'list',
      selectedClient: null,

      // Server Management
      cpanelAccounts: [],
      emailAccounts: [],
      databases: [],
      serverStats: {
        cpuUsage: 23,
        memoryUsage: 67,
        diskUsage: 45,
        networkIO: 12
      },

      // Dashboard Features
      notifications: [
        { id: 1, type: 'warning', message: 'High memory usage detected', time: '5 min ago' },
        { id: 2, type: 'info', message: 'New ticket #1003 created', time: '10 min ago' },
        { id: 3, type: 'success', message: 'Backup completed successfully', time: '1 hour ago' }
      ],
      showNotifications: false,
      
      quickActions: [
        { id: 'create-ticket', label: 'New Ticket', icon: '🎫', color: '#3b82f6' },
        { id: 'add-client', label: 'Add Client', icon: '👤', color: '#10b981' },
        { id: 'create-invoice', label: 'Invoice', icon: '💰', color: '#f59e0b' },
        { id: 'backup-account', label: 'Backup', icon: '💾', color: '#8b5cf6' },
        { id: 'check-ssl', label: 'SSL Check', icon: '🔒', color: '#ef4444' },
        { id: 'system-status', label: 'System', icon: '⚡', color: '#06b6d4' }
      ],

      // Additional Features
      analyticsData: {
        totalTickets: 127,
        openTickets: 23,
        resolvedTickets: 89,
        clientSatisfaction: 4.8
      },

      // REAL DATA PROPERTIES
      revenueData: {
        totalRevenue: 12450,
        paidInvoices: 9340,
        pendingInvoices: 1870,
        overdueInvoices: 1240,
        monthlyGrowth: 23
      },
      
      recentActivities: [],
      realDataLoaded: false,
      dataRefreshInterval: null,
      dashboardLoading: false,

      // NEW HOSTING DATA PROPERTIES
      hostingAccounts: [],
      hostingDomains: [],
      hostingDiskUsage: [],
      hostingSystemInfo: {},
      hostingSummary: {
        totalAccounts: 0,
        totalDomains: 0,
        totalDiskUsageGB: 0,
        activeServices: 0
      },
      hostingDataLoaded: false,
      hostingDataLoading: false
    }
  }, 

  mounted() {
    this.loadRealDashboardData(); // Load all real data on mount
    this.startAutoRefresh(); // Start automatic data refresh
  },

  beforeUnmount() {
    this.stopAutoRefresh(); // Clean up interval on component destroy
  },

  watch: {
    view(newView) {
      if (newView === 'tickets') {
        this.loadRealTickets();
        this.currentTicketView = 'list';
      } else if (newView === 'servers' || newView === 'hosting') {
        this.refreshServerData();
      }
    }
  },

  methods: {

    startLoadingDots() {
  if (this.intervalId) clearInterval(this.intervalId);
  this.loading = true;
  let i = 0;
  this.intervalId = setInterval(() => {
    this.dots = '.'.repeat(i % 4);
    this.$forceUpdate(); // ← force re-render
    i++;
  }, 400);
},

stopLoadingDots() {
  clearInterval(this.intervalId);
  this.dots = '';
  this.loading = false;
},

shouldShow(resp) {
    return (
      resp.startsWith('AI:') ||
      resp.startsWith('CATEGORY:') ||
      resp.startsWith('AGENT:') ||
      resp.startsWith('TICKET')
    );
  },
  
    getStyle(text) {
  const upperText = text.toUpperCase();

  const style = {
    fontSize: '14px',
    marginBottom: '8px',
    lineHeight: 1.4,
    width: '50%',
    padding: '8px',
    borderRadius: '6px',
  };

  if (upperText.startsWith('AGENT:')) {
    style.color = '#c71104';
    style.textAlign = 'left';
    style.marginLeft = 'auto';
    style.backgroundColor = '#fce3e1';
  } else if (upperText.startsWith('TICKET')) {
    style.color = '#525050';
    style.textAlign = 'left';
    style.marginLeft = 'auto';
    style.backgroundColor = '#f2f2f2';
  } else if (upperText.startsWith('AI:')) {
    style.color = '#1533ad';
    style.textAlign = 'left';
    style.marginRight = 'auto';
    style.backgroundColor = '#e6f0ff';
  } else if (upperText.startsWith('CATEGORY:')) {
    style.color = '#a29da6';
    style.textAlign = 'left';
    style.marginRight = 'auto';
    style.backgroundColor = '#f6f2fa';
  } 
  //else {
  //   style.color = 'white';
  //   style.textAlign = 'left';
  //   style.marginRight = 'auto';
  //   style.backgroundColor = 'white';
  // }

  return style;
},




    aiClick() {
      // console.log('Sending API_response:', JSON.parse(JSON.stringify(this.apiResponse)));
      const trimmedMessage = this.userMessage.trim();
      if (trimmedMessage){
        this.aiResponse.push(trimmedMessage);
      }
      
      this.startLoadingDots();

      fetch('http://localhost:8082/contacts/ai',{
        method: 'POST',
        credentials: 'include',
        body:JSON.stringify ({'message': this.userMessage, 'pendingFunctions': this.pending_functions, 'tokens': this.tokens,
        'API_response': [...this.apiResponse]
        })
      }).then(response => response.json())  
        .then(data => {
          if (data === 'alert'){
            alert("I couldn't handle the current request made");
            this.aiResponse = [];
            this.tokens = {};
            this.apiResponse = [];
          }
          else{
            if (data.response != 'No Response was Generated'){
              this.aiResponse.push(data.response);
            }
            if (data.category != ''){
                   this.aiResponse.push(data.category);
            }
            this.satisfaction = data.satisfaction;
            this.tokens = data.tokens_used;
            this.apiResponse = data.API_response;
            // this.pending_functions.push(...data.pending_functions);
            this.pending_functions = data.pending_functions;
       
          
          }
          this.stopLoadingDots();
          // console.log('tokens as string:', this.tokens);
    })
    this.userMessage = '';
    },

    aiClear() {
      console.log("Clicked AI");
      fetch('http://localhost:8082/contacts/ai/clear',{
        method: 'POST',
        credentials: 'include'
      })
      this.aiResponse = [];
      this.tokens = {};
      this.apiResponse = [];
      this.pending_functions = [];
      this.acknowledged_functions = [];
      this.ticketMessage = '';
      this.priority = '';
    },

    aiView() {
      console.log("Clicked AI");
      fetch('http://localhost:8082/contacts/ai/view',{
        method: 'POST',
        credentials: 'include',
        body:JSON.stringify (this.id)
      }).then(response => response.json())  
        .then(data => {
          this.messageHistory = data;
      })
    },

    aiLog() {
      fetch('http://localhost:8082/contacts/ai/log',{
        method: 'POST',
        credentials: 'include'
      }).then(response => response.json())  
        .then(data => {
          this.historyLog = data;
      })
      this.view = 'log';
    },

    aiProceed(index) {
      let func = this.pending_functions[index];
      func.confirmation = 'proceed';
      this.acknowledged_functions.push(func);
      this.pending_functions.splice(index, 1); 

      fetch('http://localhost:8082/contacts/ai/proceed',{
        method: 'POST',
        credentials: 'include',
        body:JSON.stringify (this.acknowledged_functions)
      }).then(response => response.json())  
        .then(data => {
          if (data === 'alert'){
            alert("I couldn't handle the current request made");
            this.aiResponse = [];
            this.tokens = {};
            this.apiResponse = [];
          }
          else{
            if (data.response != 'No Response was Generated'){
              this.aiResponse.push(data.response);
            }
            this.tokens = data.tokens_used;
            this.apiResponse = data.API_response;
            this.userMessage = data.user_message;
            
            // Process the response without triggering scroll
          this.acknowledged_functions = [];
            
            // Only call aiClick if there's a user message to process
            if (this.userMessage && this.userMessage.trim()) {
          this.aiClick();
            }
          }
      })
    },

    aiReject(index) {
      fetch('http://localhost:8082/contacts/ai/reject',{
        method: 'POST',
        credentials: 'include'
      }).then(response => response.json())  
      .then(data => {
        this.userMessage = data.user_message;
        this.pending_functions.splice(index, 1);
        this.aiClick();
      })
    },

    submitTicketId(){
      // this.userMessage = `TICKETID: ${this.ticketIdInput}`;
      fetch('http://localhost:8082/contacts/ai/ticketID',{
        method: 'POST',
        credentials: 'include',
        body:JSON.stringify ({'message': this.ticketIdInput})
      }).then(response => response.json())  
        .then(data => {
          // this.aiResponse.push(data.summary);
          this.userMessage = data.summary;
          this.aiResponse.push(data.category);
          this.priority = data.priority;
          this.aiClick();
      })
      this.ticketIdInput = '';
    },

    handleClientSubmit(){
      fetch('http://localhost:8082/contacts/ai/client',{
        method: 'POST',
        credentials: 'include',
        body:JSON.stringify ({'clientID': this.clientId, 'product': this.product, 'server': this.server})
      }) 
      this.view = "AI";
    },

    getNewChatStyle(text) {
      const upperText = text.toUpperCase();

      const style = {
        fontSize: '14px',
        marginBottom: '12px',
        lineHeight: 1.4,
        padding: '12px 16px',
        borderRadius: '8px',
        maxWidth: '80%',
      };

      if (upperText.startsWith('AGENT:')) {
        style.backgroundColor = '#f8f9fa';
        style.color = '#495057';
        style.marginLeft = 'auto';
        style.borderLeft = '3px solid #007bff';
      } else if (upperText.startsWith('TICKET')) {
        style.backgroundColor = '#007bff';
        style.color = 'white';
        style.fontWeight = '600';
        style.marginBottom = '16px';
      } else if (upperText.startsWith('AI:')) {
        style.backgroundColor = '#e3f2fd';
        style.color = '#1565c0';
        style.marginRight = 'auto';
        style.borderLeft = '3px solid #2196f3';
      } else if (upperText.startsWith('CATEGORY:')) {
        style.backgroundColor = '#f3e5f5';
        style.color = '#7b1fa2';
        style.marginRight = 'auto';
        style.borderLeft = '3px solid #9c27b0';
      } else {
        style.backgroundColor = '#f8f9fa';
        style.color = '#495057';
        style.marginRight = 'auto';
      }

      return style;
    },

    getProfessionalChatStyle(text) {
      const upperText = text.toUpperCase();

      const style = {
        fontSize: '14px',
        marginBottom: '16px',
        lineHeight: 1.5,
        padding: '16px 20px',
        borderRadius: '8px',
        maxWidth: '85%',
        border: '1px solid rgba(229, 231, 235, 0.8)',
      };

      if (upperText.startsWith('AGENT:')) {
        style.backgroundColor = 'rgba(249, 250, 251, 0.95)';
        style.color = '#374151';
        style.marginLeft = 'auto';
        style.borderLeft = '3px solid #2563eb';
        style.fontWeight = '500';
      } else if (upperText.startsWith('TICKET')) {
        style.backgroundColor = '#2563eb';
        style.color = 'white';
        style.fontWeight = '600';
        style.marginBottom = '20px';
        style.borderColor = '#1d4ed8';
      } else if (upperText.startsWith('AI:')) {
        style.backgroundColor = 'rgba(239, 246, 255, 0.9)';
        style.color = '#1e40af';
        style.marginRight = 'auto';
        style.borderLeft = '3px solid #3b82f6';
        style.fontWeight = '500';
      } else if (upperText.startsWith('CATEGORY:')) {
        style.backgroundColor = 'rgba(248, 250, 252, 0.9)';
        style.color = '#7c3aed';
        style.marginRight = 'auto';
        style.borderLeft = '3px solid #8b5cf6';
        style.fontWeight = '500';
      } else {
        style.backgroundColor = 'rgba(249, 250, 251, 0.95)';
        style.color = '#374151';
        style.marginRight = 'auto';
        style.fontWeight = '500';
      }

      return style;
    },

    getMessageTime() {
      const now = new Date();
      const time = now.toLocaleTimeString();
      return time.split(' ')[0];
    },

    handleKeydown(event) {
      if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        this.aiClick();
      }
    },

    exportChat() {
      // Implement export functionality
      console.log("Exporting chat");
    },

    scrollToBottom() {
      // Only scroll if user has manually scrolled to near bottom
      const chatContainer = this.$el.querySelector('[style*="overflow-y: auto"]');
      if (chatContainer) {
        const isNearBottom = chatContainer.scrollTop + chatContainer.clientHeight >= chatContainer.scrollHeight - 100;
        if (isNearBottom) {
          this.$nextTick(() => {
            const chatBottom = this.$refs.chatBottom;
            if (chatBottom) {
              chatBottom.scrollIntoView({ behavior: 'smooth' });
            }
          });
        }
      }
    },

    formatApiResponse(resp) {
      // NEW FUNCTION-BASED APPROACH
      // Instead of regex pattern matching, extract function name from API response metadata
      console.log('formatApiResponse called with:', resp);
      console.log('Current apiResponse array:', this.apiResponse);
      
      const functionName = this.extractFunctionName();
      console.log('Extracted function name:', functionName);
      
      if (functionName) {
        return this.formatByFunction(resp, functionName);
      }
      
      // Fallback to beautiful generic response for non-function responses
      console.log('No function name found, using generic formatter');
      return this.formatAsBeautifulResponse(resp);
    },
    
    extractFunctionName() {
      // Method 1: Extract function name from the most recent API response metadata
      if (this.apiResponse && this.apiResponse.length > 0) {
        const lastResponse = this.apiResponse[this.apiResponse.length - 1];
        
        // Handle different response formats from backend
        if (typeof lastResponse === 'object' && lastResponse !== null) {
          // Case 1: Object with 'name' property (direct from chat history)
          if (lastResponse.name) {
            const match = lastResponse.name.match(/^(.+)_call_response$/);
            if (match) {
              console.log('Found function name in metadata:', match[1]);
              return match[1];
            }
          }
          
          // Case 2: Object with 'role' and 'name' properties (chat history format)
          if (lastResponse.role === 'assistant' && lastResponse.name) {
            const match = lastResponse.name.match(/^(.+)_call_response$/);
            if (match) {
              console.log('Found function name in chat history format:', match[1]);
              return match[1];
            }
          }
          
          // Case 3: Check if object has function metadata
          if (lastResponse.functionName) {
            console.log('Found functionName property:', lastResponse.functionName);
            return lastResponse.functionName;
          }
        }
        
        // Case 4: String response containing JSON with function info
        if (typeof lastResponse === 'string') {
          try {
            const parsed = JSON.parse(lastResponse);
            if (parsed.functionName) {
              console.log('Found function name in parsed JSON:', parsed.functionName);
              return parsed.functionName;
            }
          } catch (e) {
            // Not JSON, continue
          }
        }
        
        // Case 5: Check all recent responses for function indicators
        for (let i = this.apiResponse.length - 1; i >= Math.max(0, this.apiResponse.length - 3); i--) {
          const response = this.apiResponse[i];
          if (typeof response === 'object' && response?.name) {
            const match = response.name.match(/^(.+)_call_response$/);
            if (match) {
              console.log('Found function name in recent responses:', match[1]);
              return match[1];
            }
          }
        }
      }
      
      // Method 2: ENHANCED CONTENT PATTERN DETECTION - Check the current response content for known patterns
      if (this.aiResponse && this.aiResponse.length > 0) {
        const lastAiResponse = this.aiResponse[this.aiResponse.length - 1];
        if (typeof lastAiResponse === 'string') {
          // Enhanced disk usage detection - check for multiple patterns
          if ((lastAiResponse.includes('Disk Blocks Used') && lastAiResponse.includes('Inodes Used')) ||
              (lastAiResponse.includes('disk blocks') && lastAiResponse.includes('inodes')) ||
              (lastAiResponse.includes('Disk Usage') || lastAiResponse.includes('disk usage')) ||
              (lastAiResponse.match(/\d+\.\s*[^:]+:\s*Used\s+\d+/i)) ||
              (lastAiResponse.includes('Document Root') && lastAiResponse.includes('/home/'))) {
            console.log('Detected disk usage from enhanced content pattern');
            return 'get_disk_usage';
          }
          
          // Check for load average patterns
          if (lastAiResponse.includes('Load Time') || 
              lastAiResponse.includes('Load Average') ||
              lastAiResponse.includes('Previous Minute Load') ||
              lastAiResponse.includes('Previous Five Minutes Load')) {
            console.log('Detected system load from content pattern');
            return 'systemloadavg';
          }
          
          // Check for account listing patterns
          if ((lastAiResponse.includes('accounts') || lastAiResponse.includes('cPanel')) && 
              (lastAiResponse.includes('Domain') || lastAiResponse.includes('Email') || lastAiResponse.includes('Status'))) {
            console.log('Detected accounts list from content pattern');
            return 'listaccts';
          }
          
          // Check for email patterns
          if (lastAiResponse.includes('@') && 
              (lastAiResponse.includes('email') || lastAiResponse.includes('pop') || lastAiResponse.includes('forwarder'))) {
            console.log('Detected email list from content pattern');
            return 'list_pops';
          }
          
          // Check for domain info patterns
          if (lastAiResponse.includes('Document Root') && lastAiResponse.includes('public_html')) {
            console.log('Detected domain info from content pattern');
            return 'get_domain_info';
          }
          
          // Check for package patterns
          if (lastAiResponse.includes('Package') && (lastAiResponse.includes('Quota') || lastAiResponse.includes('Bandwidth'))) {
            console.log('Detected packages list from content pattern');
            return 'listpkgs';
          }
        }
      }
      
      // Method 3: Check for numbered list patterns that often indicate disk usage
      if (this.aiResponse && this.aiResponse.length > 0) {
        const lastAiResponse = this.aiResponse[this.aiResponse.length - 1];
        if (typeof lastAiResponse === 'string') {
          // Look for numbered list with account names and usage data
          const numberedListPattern = /\d+\.\s*([^:]+):\s*(Used\s+\d+|.*[Dd]isk|.*[Bb]locks)/i;
          if (numberedListPattern.test(lastAiResponse)) {
            console.log('Detected disk usage from numbered list pattern');
            return 'get_disk_usage';
          }
        }
      }
      
      console.log('No function name detected');
      return null;
    },
    
    formatByFunction(resp, functionName) {
      // COMPREHENSIVE FUNCTION-TO-FORMATTER MAPPING
      const formatters = {
        // System & Server Functions
        'systemloadavg': () => this.formatLoadMetrics(resp),
        'get_disk_usage': () => this.formatDiskUsage(resp),
        'get_domain_info': () => this.formatDomainInfo(resp),
        'get_information': () => this.formatSystemInfo(resp),
        
        // Account Management
        'listaccts': () => this.formatAccountsList(resp),
        'createacct': () => this.formatAsBeautifulResponse(resp, 'Account Created', '✅'),
        
        // Package Management
        'listpkgs': () => this.formatPackagesList(resp),
        
        // Email Functions
        'list_pops': () => this.formatEmailList(resp),
        'count_pops': () => this.formatEmailCount(resp),
        'add_pop': () => this.formatAsBeautifulResponse(resp, 'Email Account Added', '📧'),
        'delete_pop': () => this.formatAsBeautifulResponse(resp, 'Email Account Deleted', '🗑️'),
        
        // Email Forwarding
        'list_forwarders': () => this.formatForwardersList(resp),
        'add_forwarder': () => this.formatAsBeautifulResponse(resp, 'Email Forwarder Added', '↗️'),
        
        // WHMCS Client Functions
        'getClientDetails': () => this.formatClientDetails(resp),
        'getClientsProducts': () => this.formatClientProducts(resp),
        'getProducts': () => this.formatProductInfo(resp),
        'getInvoices': () => this.formatInvoicesList(resp),
        
        // Special Functions
        'RECOMMENDED TICKET RESPONSE': () => this.formatAsBeautifulResponse(resp, 'Ticket Response', '🎫'),
        'agentChat': () => this.formatAsBeautifulResponse(resp, 'Agent Message', '💬'),
        'ticketResponse': () => this.formatAsBeautifulResponse(resp, 'Ticket Response', '🎫')
      };
      
      // Use the specific formatter for this function
      const formatter = formatters[functionName];
      if (formatter) {
        console.log(`Using function-based formatter for: ${functionName}`);
        return formatter();
      }
      
      // Fallback for unknown functions with better naming
      console.log(`Using fallback formatter for unknown function: ${functionName}`);
      const title = functionName.charAt(0).toUpperCase() + functionName.slice(1).replace(/_/g, ' ');
      return this.formatAsBeautifulResponse(resp, `${title} Result`, '⚡');
    },

    // Keep existing formatter methods but remove all the containsXxx methods since we don't need them anymore
    formatSystemMetrics(resp) {
      let formatted = resp;
      
      // Format the main response with better structure
      if (resp.includes('System Load Average') && resp.includes('Disk Usage')) {
        const parts = resp.split('**Disk Usage:**');
        const loadSection = parts[0];
        const diskSection = parts[1];
        
        let html = `
          <div style="font-family: 'Segoe UI', sans-serif; line-height: 1.6; color: #374151;">
            ${this.formatLoadMetrics(loadSection)}
            ${this.formatDiskUsage('**Disk Usage:**' + diskSection)}
          </div>
        `;
        return html;
      }
      
      // Always format with beautiful UI - no plain text fallback
      return this.formatAsBeautifulResponse(formatted, 'System Metrics', '⚡');
    },

    // Add missing formatters that were referenced in the mapping
    formatClientDetails(resp) {
      return this.formatAsBeautifulResponse(resp, 'Client Details', '👤');
    },
    
    formatClientProducts(resp) {
      return this.formatAsBeautifulResponse(resp, 'Client Products', '📦');
    },
    
    formatProductInfo(resp) {
      return this.formatAsBeautifulResponse(resp, 'Product Information', '🛍️');
    },
    
    formatInvoicesList(resp) {
      return this.formatAsBeautifulResponse(resp, 'Invoices', '💰');
    },

    formatLoadMetrics(resp) {
      if (!resp.includes('Load')) return this.formatAsBeautifulResponse(resp, 'Load Metrics', '📊');
      
      // Extract load average data
      const text = resp;
      const oneMinMatch = text.match(/Previous Minute Load Time:\s*([\d.]+)/i);
      const fiveMinMatch = text.match(/Previous Five Minutes Load Time:\s*([\d.]+)/i);
      const fifteenMinMatch = text.match(/Previous Fifteen Minutes Load Time:\s*([\d.]+)/i);
      
      const loadData = [
        { period: '1 Minute', value: oneMinMatch ? parseFloat(oneMinMatch[1]) : 0 },
        { period: '5 Minutes', value: fiveMinMatch ? parseFloat(fiveMinMatch[1]) : 0 },
        { period: '15 Minutes', value: fifteenMinMatch ? parseFloat(fifteenMinMatch[1]) : 0 }
      ];
      
      if (loadData.every(item => item.value === 0)) {
        return this.formatAsBeautifulResponse(resp, 'Load Metrics', '📊');
      }
      
      let html = `
        <div style="margin-bottom: 24px;">
          <h4 style="margin: 0 0 16px 0; font-size: 16px; font-weight: 600; color: #1f2937; display: flex; align-items: center; gap: 8px;">
            <span style="font-size: 16px;">📊</span> System Load Average
          </h4>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;">
      `;
      
      loadData.forEach((item, index) => {
        // Determine load status and color
        let status, color, bgColor, icon;
        if (item.value <= 0.5) {
          status = 'Excellent'; color = '#10b981'; bgColor = 'rgba(240, 253, 244, 0.9)'; icon = '🟢';
        } else if (item.value <= 1.0) {
          status = 'Good'; color = '#059669'; bgColor = 'rgba(240, 253, 244, 0.9)'; icon = '🟢';
        } else if (item.value <= 2.0) {
          status = 'Moderate'; color = '#f59e0b'; bgColor = 'rgba(254, 252, 232, 0.9)'; icon = '🟡';
        } else {
          status = 'High'; color = '#dc2626'; bgColor = 'rgba(254, 242, 242, 0.9)'; icon = '🔴';
        }
        
        html += `
          <div style="background: ${bgColor}; border: 1px solid ${color}30; border-radius: 16px; padding: 20px; text-align: center; box-shadow: 0 4px 12px ${color}15; transition: all 0.2s ease;" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 20px ${color}25'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px ${color}15'">
            <div style="display: flex; align-items: center; justify-content: center; gap: 8px; margin-bottom: 12px;">
              <span style="font-size: 16px;">${icon}</span>
              <div style="font-size: 12px; color: #6b7280; font-weight: 700; text-transform: uppercase; letter-spacing: 0.5px;">${item.period}</div>
            </div>
            <div style="font-size: 36px; font-weight: 800; color: ${color}; margin-bottom: 8px; line-height: 1;">${item.value}</div>
            <div style="font-size: 11px; color: ${color}; font-weight: 600; text-transform: uppercase;">${status}</div>
          </div>
        `;
      });
      
      html += `
          </div>
        </div>
      `;
      
      return html;
    },

    formatDiskUsage(resp) {
      console.log('formatDiskUsage called with:', resp);
      
      // Always format with beautiful UI cards
      const lines = resp.split('\n').filter(line => line.trim());
      const accounts = [];
      
      console.log('All lines to process:', lines);
      
      // Enhanced parsing for multiple disk usage formats
      lines.forEach((line, index) => {
        console.log(`Processing line ${index}:`, line);
        
        // Skip lines that don't contain disk usage data
        if (!line.includes('Disk Blocks') && !line.includes('disk blocks')) {
          console.log('Skipping line - no disk usage data');
          return;
        }
        
        console.log('Found disk usage line:', line);
        
        // Format 1: "1. accountname: Used 292 Disk Blocks, 274 Inodes"
        let match = line.match(/\d+\.\s*([^:]+):\s*Used\s+(\d+(?:,\d+)*)\s+Disk Blocks,\s*(\d+(?:,\d+)*)\s+Inodes/i);
        
        // Format 2: "accountname: Used 2,171,932 Disk Blocks, 272 Inodes (Limit: 102,400,000 Blocks)"
        if (!match) {
          match = line.match(/([^:]+):\s*Used\s+(\d+(?:,\d+)*)\s+Disk Blocks,\s*(\d+(?:,\d+)*)\s+Inodes(?:\s*\(Limit:\s*(\d+(?:,\d+)*)\s*Blocks\))?/i);
        }
        
        // Format 3: Markdown bullet points "- **accountname**: 164 Disk Blocks Used, 253 Inodes Used"
        if (!match) {
          // More flexible pattern for markdown format
          match = line.match(/^[-*]\s*\*\*([^*]+)\*\*:\s*(\d+(?:,\d+)*)\s+Disk Blocks Used,\s*(\d+(?:,\d+)*)\s+Inodes Used/i);
          
          // If we found a match, check for optional limit
          if (match) {
            const limitMatch = line.match(/\(Limit:\s*(\d+(?:,\d+)*)\s+Disk Blocks\)/i);
            if (limitMatch) {
              match[4] = limitMatch[1]; // Add limit as 4th capture group
            }
            console.log('Markdown format matched!', match);
          }
        }
        
        // Format 4: Simple "accountname Used X disk blocks"
        if (!match) {
          match = line.match(/([^:]+)\s+Used\s+(\d+(?:,\d+)*)\s+disk blocks/i);
          console.log('Format 4 match:', match);
          if (match) {
            // For this format, set inodes to 0 and add the account
            const account = match[1].trim();
            const diskBlocks = parseInt(match[2].replace(/,/g, ''));
            accounts.push({ account, diskBlocks, inodes: 0, limit: null });
            return; // Continue to next line
          }
        }
        
        // Format 5: "1. **accountname** - Document Root: /path" (from domain info that includes disk usage)
        if (!match) {
          match = line.match(/\d+\.\s*\*\*([^*]+)\*\*\s*-\s*Document Root/i);
          console.log('Format 5 match:', match);
        if (match) {
            const account = match[1].trim();
            // For domain listings, we'll add with placeholder values
            accounts.push({ account, diskBlocks: 0, inodes: 0, limit: null });
            return;
          }
        }
        
        if (match && match.length >= 3) {
          const account = match[1].trim();
          const diskBlocks = match[2] ? parseInt(match[2].replace(/,/g, '')) : 0;
          const inodes = match[3] ? parseInt(match[3].replace(/,/g, '')) : 0;
          const limit = match[4] ? parseInt(match[4].replace(/,/g, '')) : null;
          
          console.log('Parsed account:', { account, diskBlocks, inodes, limit });
          accounts.push({ account, diskBlocks, inodes, limit });
        } else {
          console.log('No match found for line:', line);
        }
      });
      
      console.log('Parsed accounts:', accounts);
      
      // If no structured data found but response contains disk-related content, create a general response card
      if (accounts.length === 0) {
        console.log('No accounts parsed, checking for disk-related content...');
        
        // Check if it's still disk-related content that should be formatted nicely
        if (resp.toLowerCase().includes('disk') || resp.toLowerCase().includes('usage') || resp.toLowerCase().includes('blocks')) {
          console.log('Formatting as general disk usage response');
        return this.formatAsBeautifulResponse(resp, 'Disk Usage Information', '💾');
        }
        
        // Last fallback
        return this.formatAsBeautifulResponse(resp, 'System Information', '💾');
      }
      
      // Sort accounts by disk usage (highest first)
      accounts.sort((a, b) => b.diskBlocks - a.diskBlocks);
      
      console.log('Creating beautiful disk usage cards for', accounts.length, 'accounts');
      
      let html = `
        <div style="margin-bottom: 24px;">
          <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 20px;">
            <h4 style="margin: 0; font-size: 20px; font-weight: 700; color: #0f172a; display: flex; align-items: center; gap: 12px;">
              <div style="width: 36px; height: 36px; background: linear-gradient(135deg, #3b82f6, #1d4ed8); border-radius: 12px; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);">
                <span style="font-size: 18px; color: white;">💾</span>
              </div>
              Disk Usage Analysis
            </h4>
            <div style="display: flex; gap: 8px;">
              <span style="background: linear-gradient(135deg, rgba(34, 197, 94, 0.1), rgba(34, 197, 94, 0.05)); color: #059669; padding: 6px 12px; border-radius: 8px; font-size: 12px; font-weight: 600; border: 1px solid rgba(34, 197, 94, 0.2);">
                ${accounts.length} Accounts
              </span>
              <span style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(59, 130, 246, 0.05)); color: #2563eb; padding: 6px 12px; border-radius: 8px; font-size: 12px; font-weight: 600; border: 1px solid rgba(59, 130, 246, 0.2);">
                Live Data
              </span>
            </div>
          </div>
          
          <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border: 1px solid rgba(226, 232, 240, 0.8); border-radius: 16px; overflow: hidden; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05);">
            <div style="background: linear-gradient(135deg, rgba(248, 250, 252, 0.95), rgba(241, 245, 249, 0.8)); padding: 20px 24px; border-bottom: 1px solid rgba(226, 232, 240, 0.6);">
              <div style="display: grid; grid-template-columns: 2.5fr 1.5fr 1fr 1.5fr 1fr; gap: 20px; font-size: 12px; font-weight: 700; color: #64748b; text-transform: uppercase; letter-spacing: 0.8px;">
                <div>ACCOUNT</div>
                <div style="text-align: center;">DISK USAGE</div>
                <div style="text-align: center;">INODES</div>
                <div style="text-align: center;">USAGE %</div>
                <div style="text-align: center;">STATUS</div>
              </div>
            </div>
            <div style="max-height: 480px; overflow-y: auto; scrollbar-width: thin; scrollbar-color: rgba(59, 130, 246, 0.3) transparent;">
      `;
      
      accounts.forEach((account, index) => {
        const usagePercentage = account.limit ? Math.round((account.diskBlocks / account.limit) * 100) : 0;
        
        // Determine usage status with enhanced styling
        let statusColor, statusIcon, statusText, statusBg, progressColor;
        if (usagePercentage > 90) {
          statusColor = '#dc2626'; statusIcon = '🔴'; statusText = 'Critical'; 
          statusBg = 'rgba(239, 68, 68, 0.1)'; progressColor = '#ef4444';
        } else if (usagePercentage > 75) {
          statusColor = '#ea580c'; statusIcon = '🟠'; statusText = 'Warning'; 
          statusBg = 'rgba(234, 88, 12, 0.1)'; progressColor = '#f97316';
        } else if (usagePercentage > 50) {
          statusColor = '#f59e0b'; statusIcon = '🟡'; statusText = 'Medium'; 
          statusBg = 'rgba(245, 158, 11, 0.1)'; progressColor = '#f59e0b';
        } else {
          statusColor = '#10b981'; statusIcon = '🟢'; statusText = 'Good'; 
          statusBg = 'rgba(16, 185, 129, 0.1)'; progressColor = '#10b981';
        }

        // Format sizes in human-readable format
        const formatSize = (blocks) => {
          if (blocks >= 1000000) return (blocks / 1000000).toFixed(1) + 'M';
          if (blocks >= 1000) return (blocks / 1000).toFixed(1) + 'K';
          return blocks.toString();
        };
        
        html += `
          <div style="display: grid; grid-template-columns: 2.5fr 1.5fr 1fr 1.5fr 1fr; gap: 20px; padding: 20px 24px; background: rgba(255, 255, 255, 0.8); border-bottom: 1px solid rgba(226, 232, 240, 0.4); transition: all 0.3s ease; cursor: pointer;" 
               onmouseover="this.style.background='rgba(59, 130, 246, 0.03)'; this.style.transform='translateX(4px)'; this.style.boxShadow='inset 3px 0 0 rgba(59, 130, 246, 0.4)'" 
               onmouseout="this.style.background='rgba(255, 255, 255, 0.8)'; this.style.transform='translateX(0)'; this.style.boxShadow='none'">
            
            <div style="display: flex; align-items: center; gap: 12px;">
              <div style="width: 40px; height: 40px; background: linear-gradient(135deg, rgba(71, 85, 105, 0.1), rgba(71, 85, 105, 0.05)); border: 1px solid rgba(71, 85, 105, 0.2); border-radius: 10px; display: flex; align-items: center; justify-content: center;">
                <span style="font-size: 16px; color: #475569;">👤</span>
              </div>
              <div>
                <div style="font-weight: 700; color: #0f172a; font-size: 15px; font-family: 'SF Mono', 'Monaco', 'Consolas', monospace; margin-bottom: 2px;">${account.account}</div>
                <div style="font-size: 11px; color: #64748b; font-weight: 500;">User Account</div>
              </div>
            </div>
            
            <div style="text-align: center; display: flex; flex-direction: column; justify-content: center;">
              <div style="font-weight: 700; color: #0f172a; font-size: 16px; margin-bottom: 4px;">${formatSize(account.diskBlocks)}</div>
              <div style="font-size: 11px; color: #64748b; font-weight: 500;">blocks</div>
              <div style="font-size: 10px; color: #94a3b8; margin-top: 2px;">${account.diskBlocks.toLocaleString()}</div>
            </div>
            
            <div style="text-align: center; display: flex; flex-direction: column; justify-content: center;">
              <div style="font-weight: 700; color: #0f172a; font-size: 16px; margin-bottom: 4px;">${account.inodes >= 1000 ? (account.inodes / 1000).toFixed(1) + 'K' : account.inodes}</div>
              <div style="font-size: 11px; color: #64748b; font-weight: 500;">files</div>
            </div>
            
            <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; gap: 8px;">
              ${account.limit ? `
                <div style="width: 100%; max-width: 80px;">
                  <div style="background: rgba(226, 232, 240, 0.5); height: 6px; border-radius: 3px; overflow: hidden; box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);">
                    <div style="height: 100%; background: linear-gradient(90deg, ${progressColor}, ${progressColor}dd); width: ${Math.min(usagePercentage, 100)}%; border-radius: 3px; transition: all 0.5s ease; box-shadow: 0 1px 3px rgba(0,0,0,0.2);"></div>
                  </div>
                </div>
                <div style="font-weight: 700; color: ${statusColor}; font-size: 14px;">${usagePercentage}%</div>
                <div style="font-size: 10px; color: #64748b;">of ${formatSize(account.limit)}</div>
              ` : `
                <div style="font-size: 12px; color: #64748b; font-style: italic;">No limit</div>
                <div style="font-size: 10px; color: #94a3b8;">set</div>
              `}
            </div>
            
            <div style="text-align: center; display: flex; flex-direction: column; align-items: center; justify-content: center;">
              <div style="background: ${statusBg}; border: 1px solid ${statusColor}33; border-radius: 12px; padding: 8px 12px; display: flex; align-items: center; gap: 6px; min-width: 70px; justify-content: center;">
                <span style="font-size: 12px;">${statusIcon}</span>
                <span style="color: ${statusColor}; font-size: 12px; font-weight: 700;">${statusText}</span>
              </div>
            </div>
          </div>
        `;
      });
      
      html += `
            </div>
          </div>
        </div>
      `;
      
      // Enhanced summary cards with better visual hierarchy
      const totalAccounts = accounts.length;
      const totalDiskBlocks = accounts.reduce((sum, acc) => sum + acc.diskBlocks, 0);
      const totalInodes = accounts.reduce((sum, acc) => sum + acc.inodes, 0);
      const highUsageAccounts = accounts.filter(acc => acc.limit && (acc.diskBlocks / acc.limit) > 0.8).length;
      const criticalUsageAccounts = accounts.filter(acc => acc.limit && (acc.diskBlocks / acc.limit) > 0.9).length;
      const averageUsage = accounts.filter(acc => acc.limit).reduce((sum, acc) => sum + (acc.diskBlocks / acc.limit), 0) / accounts.filter(acc => acc.limit).length;
      
      html += `
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 20px; margin-top: 24px;">
          <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(59, 130, 246, 0.05)); border: 1px solid rgba(59, 130, 246, 0.25); border-radius: 16px; padding: 24px; text-align: center; box-shadow: 0 8px 20px rgba(59, 130, 246, 0.12); transition: all 0.3s ease; cursor: pointer; position: relative; overflow: hidden;" 
               onmouseover="this.style.transform='translateY(-4px)'; this.style.boxShadow='0 12px 30px rgba(59, 130, 246, 0.2)'" 
               onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 8px 20px rgba(59, 130, 246, 0.12)'">
            <div style="position: absolute; top: -20px; right: -20px; width: 60px; height: 60px; background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(59, 130, 246, 0.05)); border-radius: 50%; opacity: 0.5;"></div>
            <div style="font-size: 13px; color: #64748b; margin-bottom: 12px; font-weight: 700; text-transform: uppercase; letter-spacing: 1px;">Total Accounts</div>
            <div style="font-size: 42px; font-weight: 800; color: #2563eb; margin-bottom: 8px; line-height: 1; text-shadow: 0 2px 4px rgba(37, 99, 235, 0.2);">${totalAccounts}</div>
            <div style="font-size: 12px; color: #2563eb; opacity: 0.8; font-weight: 600; text-transform: uppercase;">Monitored</div>
          </div>
          
          <div style="background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.05)); border: 1px solid rgba(16, 185, 129, 0.25); border-radius: 16px; padding: 24px; text-align: center; box-shadow: 0 8px 20px rgba(16, 185, 129, 0.12); transition: all 0.3s ease; cursor: pointer; position: relative; overflow: hidden;" 
               onmouseover="this.style.transform='translateY(-4px)'; this.style.boxShadow='0 12px 30px rgba(16, 185, 129, 0.2)'" 
               onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 8px 20px rgba(16, 185, 129, 0.12)'">
            <div style="position: absolute; top: -20px; right: -20px; width: 60px; height: 60px; background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(16, 185, 129, 0.05)); border-radius: 50%; opacity: 0.5;"></div>
            <div style="font-size: 13px; color: #64748b; margin-bottom: 12px; font-weight: 700; text-transform: uppercase; letter-spacing: 1px;">Total Storage</div>
            <div style="font-size: 42px; font-weight: 800; color: #059669; margin-bottom: 8px; line-height: 1; text-shadow: 0 2px 4px rgba(5, 150, 105, 0.2);">${(totalDiskBlocks / 1000000).toFixed(1)}M</div>
            <div style="font-size: 12px; color: #059669; opacity: 0.8; font-weight: 600; text-transform: uppercase;">Blocks Used</div>
          </div>
          
          <div style="background: linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(139, 92, 246, 0.05)); border: 1px solid rgba(139, 92, 246, 0.25); border-radius: 16px; padding: 24px; text-align: center; box-shadow: 0 8px 20px rgba(139, 92, 246, 0.12); transition: all 0.3s ease; cursor: pointer; position: relative; overflow: hidden;" 
               onmouseover="this.style.transform='translateY(-4px)'; this.style.boxShadow='0 12px 30px rgba(139, 92, 246, 0.2)'" 
               onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 8px 20px rgba(139, 92, 246, 0.12)'">
            <div style="position: absolute; top: -20px; right: -20px; width: 60px; height: 60px; background: linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(139, 92, 246, 0.05)); border-radius: 50%; opacity: 0.5;"></div>
            <div style="font-size: 13px; color: #64748b; margin-bottom: 12px; font-weight: 700; text-transform: uppercase; letter-spacing: 1px;">Total Files</div>
            <div style="font-size: 42px; font-weight: 800; color: #7c3aed; margin-bottom: 8px; line-height: 1; text-shadow: 0 2px 4px rgba(124, 58, 237, 0.2);">${(totalInodes / 1000).toFixed(1)}K</div>
            <div style="font-size: 12px; color: #7c3aed; opacity: 0.8; font-weight: 600; text-transform: uppercase;">Inodes</div>
          </div>
          
          ${averageUsage && !isNaN(averageUsage) ? `
          <div style="background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(245, 158, 11, 0.05)); border: 1px solid rgba(245, 158, 11, 0.25); border-radius: 16px; padding: 24px; text-align: center; box-shadow: 0 8px 20px rgba(245, 158, 11, 0.12); transition: all 0.3s ease; cursor: pointer; position: relative; overflow: hidden;" 
               onmouseover="this.style.transform='translateY(-4px)'; this.style.boxShadow='0 12px 30px rgba(245, 158, 11, 0.2)'" 
               onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 8px 20px rgba(245, 158, 11, 0.12)'">
            <div style="position: absolute; top: -20px; right: -20px; width: 60px; height: 60px; background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(245, 158, 11, 0.05)); border-radius: 50%; opacity: 0.5;"></div>
            <div style="font-size: 13px; color: #64748b; margin-bottom: 12px; font-weight: 700; text-transform: uppercase; letter-spacing: 1px;">Avg Usage</div>
            <div style="font-size: 42px; font-weight: 800; color: #d97706; margin-bottom: 8px; line-height: 1; text-shadow: 0 2px 4px rgba(217, 119, 6, 0.2);">${Math.round(averageUsage * 100)}%</div>
            <div style="font-size: 12px; color: #d97706; opacity: 0.8; font-weight: 600; text-transform: uppercase;">Capacity</div>
          </div>
          ` : ''}
          
          ${criticalUsageAccounts > 0 ? `
          <div style="background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(239, 68, 68, 0.05)); border: 1px solid rgba(239, 68, 68, 0.25); border-radius: 16px; padding: 24px; text-align: center; box-shadow: 0 8px 20px rgba(239, 68, 68, 0.12); transition: all 0.3s ease; cursor: pointer; position: relative; overflow: hidden; animation: pulse-warning 3s infinite;" 
               onmouseover="this.style.transform='translateY(-4px)'; this.style.boxShadow='0 12px 30px rgba(239, 68, 68, 0.25)'" 
               onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 8px 20px rgba(239, 68, 68, 0.12)'">
            <div style="position: absolute; top: -20px; right: -20px; width: 60px; height: 60px; background: linear-gradient(135deg, rgba(239, 68, 68, 0.15), rgba(239, 68, 68, 0.08)); border-radius: 50%; opacity: 0.7;"></div>
            <div style="font-size: 13px; color: #64748b; margin-bottom: 12px; font-weight: 700; text-transform: uppercase; letter-spacing: 1px;">Critical</div>
            <div style="font-size: 42px; font-weight: 800; color: #dc2626; margin-bottom: 8px; line-height: 1; text-shadow: 0 2px 4px rgba(220, 38, 38, 0.2);">${criticalUsageAccounts}</div>
            <div style="font-size: 12px; color: #dc2626; opacity: 0.8; font-weight: 600; text-transform: uppercase;">Accounts >90%</div>
          </div>
          ` : ''}
        </div>
        
        <!-- Add CSS animations for enhanced UX -->
        <style>
          @keyframes pulse-warning {
            0%, 100% { box-shadow: 0 8px 20px rgba(239, 68, 68, 0.12); }
            50% { box-shadow: 0 8px 20px rgba(239, 68, 68, 0.25); }
          }
          
          /* Custom scrollbar for the accounts list */
          .disk-usage-scroll::-webkit-scrollbar {
            width: 6px;
          }
          .disk-usage-scroll::-webkit-scrollbar-track {
            background: rgba(241, 245, 249, 0.5);
            border-radius: 3px;
          }
          .disk-usage-scroll::-webkit-scrollbar-thumb {
            background: rgba(59, 130, 246, 0.3);
            border-radius: 3px;
          }
          .disk-usage-scroll::-webkit-scrollbar-thumb:hover {
            background: rgba(59, 130, 246, 0.5);
          }
        </style>
      `;
      
      console.log('Returning formatted disk usage HTML');
      return html;
    },

    formatDomainInfo(resp) {
      // Extract domain data from the numbered list format
      const lines = resp.split('\n').filter(line => 
        line.includes('Document Root') && 
        (line.includes('public_html') || line.includes('/home/'))
      );
      const domains = [];
      
      lines.forEach(line => {
        // Handle format: "1. **1oak.ca** - Document Root: /home/oneoakca/public_html"
        let match = line.match(/\d+\.\s*\*\*([^*]+)\*\*\s*-\s*Document Root[:\s]+(.+)/i);
        
        // Handle alternative format without stars: "1. domain.com - Document Root: /path"
        if (!match) {
          match = line.match(/\d+\.\s*([^-]+)\s*-\s*Document Root[:\s]+(.+)/i);
        }
        
        if (match) {
          const domain = match[1].trim();
          const docRoot = match[2].trim();
          
          // Extract account name from document root path
          const accountMatch = docRoot.match(/\/home\/([^\/]+)/);
          const account = accountMatch ? accountMatch[1] : 'unknown';
          
          domains.push({ domain, docRoot, account });
        }
      });
      
      if (domains.length === 0) return this.formatAsBeautifulResponse(resp, 'Domain Information', '🌐');
      
      // Sort domains alphabetically
      domains.sort((a, b) => a.domain.localeCompare(b.domain));
      
      let html = `
        <div style="margin-bottom: 24px;">
          <h4 style="margin: 0 0 16px 0; font-size: 16px; font-weight: 600; color: #1f2937; display: flex; align-items: center; gap: 8px;">
            <span style="font-size: 16px;">🌐</span> Domain Information
          </h4>
          <div style="background: rgba(249, 250, 251, 0.8); border: 1px solid rgba(229, 231, 235, 0.8); border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
            <div style="background: linear-gradient(135deg, rgba(243, 244, 246, 0.9), rgba(243, 244, 246, 0.7)); padding: 16px 20px; border-bottom: 1px solid rgba(229, 231, 235, 0.8);">
              <div style="display: grid; grid-template-columns: 2fr 1fr 2fr; gap: 20px; font-size: 12px; font-weight: 700; color: #6b7280; text-transform: uppercase; letter-spacing: 0.5px;">
                <div>DOMAIN</div>
                <div style="text-align: center;">ACCOUNT</div>
                <div style="text-align: right;">DOCUMENT ROOT</div>
              </div>
            </div>
            <div style="max-height: 500px; overflow-y: auto;">
      `;
      
      domains.forEach((domain, index) => {
        const bgColor = index % 2 === 0 ? 'rgba(255, 255, 255, 0.95)' : 'rgba(249, 250, 251, 0.95)';
        
        // Determine domain status icon and color
        let statusIcon = '🟢';
        let statusColor = '#10b981';
        let statusText = 'Active';
        
        // Check if it's a common domain type
        if (domain.domain.includes('example')) {
          statusIcon = '🟡';
          statusColor = '#f59e0b';
          statusText = 'Demo';
        }
        
        // Format document root for better display
        const shortDocRoot = domain.docRoot.replace('/home/', '~/').replace('/public_html', '');
        
        html += `
          <div style="display: grid; grid-template-columns: 2fr 1fr 2fr; gap: 20px; padding: 16px 20px; background: ${bgColor}; border-bottom: 1px solid rgba(229, 231, 235, 0.3); transition: all 0.2s ease;" onmouseover="this.style.background='rgba(59, 130, 246, 0.05)'; this.style.transform='translateX(2px)'" onmouseout="this.style.background='${bgColor}'; this.style.transform='translateX(0)'">
            <div>
              <div style="font-weight: 700; color: #1f2937; font-size: 14px; margin-bottom: 4px; display: flex; align-items: center; gap: 8px;">
                ${statusIcon}
                <span>${domain.domain}</span>
              </div>
              <div style="font-size: 11px; color: ${statusColor}; font-weight: 600; text-transform: uppercase; letter-spacing: 0.5px;">${statusText}</div>
            </div>
            <div style="text-align: center;">
              <div style="background: linear-gradient(135deg, rgba(124, 58, 237, 0.1), rgba(124, 58, 237, 0.05)); color: #7c3aed; padding: 6px 12px; border-radius: 12px; font-size: 12px; font-weight: 700; border: 1px solid rgba(124, 58, 237, 0.2); display: inline-block;">
                ${domain.account}
              </div>
            </div>
            <div style="text-align: right;">
              <div style="font-family: 'SF Mono', 'Monaco', 'Consolas', monospace; font-size: 12px; color: #6b7280; font-weight: 500; margin-bottom: 2px;">${shortDocRoot}</div>
              <div style="font-size: 10px; color: #9ca3af; font-weight: 500;">public_html</div>
            </div>
          </div>
        `;
      });
      
      html += `
            </div>
          </div>
        </div>
      `;
      
      // Add beautiful summary cards matching the other functions' style
      const totalDomains = domains.length;
      const uniqueAccounts = [...new Set(domains.map(d => d.account))].length;
      const activeDomains = domains.filter(d => !d.domain.includes('example')).length;
      const demoDomains = totalDomains - activeDomains;
      
      html += `
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 16px; margin-top: 20px;">
          <div style="background: linear-gradient(135deg, rgba(239, 246, 255, 0.9), rgba(239, 246, 255, 0.6)); border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 16px; padding: 20px; text-align: center; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.1);">
            <div style="font-size: 11px; color: #6b7280; margin-bottom: 8px; font-weight: 700; text-transform: uppercase; letter-spacing: 0.5px;">Total Domains</div>
            <div style="font-size: 32px; font-weight: 800; color: #2563eb; margin-bottom: 6px; line-height: 1;">${totalDomains}</div>
            <div style="font-size: 12px; color: #2563eb; opacity: 0.8; font-weight: 600;">CONFIGURED</div>
          </div>
          
          <div style="background: linear-gradient(135deg, rgba(248, 250, 252, 0.9), rgba(248, 250, 252, 0.6)); border: 1px solid rgba(124, 58, 237, 0.3); border-radius: 16px; padding: 20px; text-align: center; box-shadow: 0 4px 12px rgba(124, 58, 237, 0.1);">
            <div style="font-size: 11px; color: #6b7280; margin-bottom: 8px; font-weight: 700; text-transform: uppercase; letter-spacing: 0.5px;">Active Domains</div>
            <div style="font-size: 32px; font-weight: 800; color: #059669; margin-bottom: 6px; line-height: 1;">${activeDomains}</div>
            <div style="font-size: 12px; color: #059669; opacity: 0.8; font-weight: 600;">LIVE</div>
          </div>
          
          <div style="background: linear-gradient(135deg, rgba(248, 250, 252, 0.9), rgba(248, 250, 252, 0.6)); border: 1px solid rgba(124, 58, 237, 0.3); border-radius: 16px; padding: 20px; text-align: center; box-shadow: 0 4px 12px rgba(124, 58, 237, 0.1);">
            <div style="font-size: 11px; color: #6b7280; margin-bottom: 8px; font-weight: 700; text-transform: uppercase; letter-spacing: 0.5px;">Accounts</div>
            <div style="font-size: 32px; font-weight: 800; color: #7c3aed; margin-bottom: 6px; line-height: 1;">${uniqueAccounts}</div>
            <div style="font-size: 12px; color: #7c3aed; opacity: 0.8; font-weight: 600;">UNIQUE</div>
          </div>
          
          ${demoDomains > 0 ? `
          <div style="background: linear-gradient(135deg, rgba(254, 252, 232, 0.9), rgba(254, 252, 232, 0.6)); border: 1px solid rgba(245, 158, 11, 0.3); border-radius: 16px; padding: 20px; text-align: center; box-shadow: 0 4px 12px rgba(245, 158, 11, 0.1);">
            <div style="font-size: 11px; color: #6b7280; margin-bottom: 8px; font-weight: 700; text-transform: uppercase; letter-spacing: 0.5px;">Demo Domains</div>
            <div style="font-size: 32px; font-weight: 800; color: #d97706; margin-bottom: 6px; line-height: 1;">${demoDomains}</div>
            <div style="font-size: 12px; color: #d97706; opacity: 0.8; font-weight: 600;">EXAMPLES</div>
          </div>
          ` : ''}
        </div>
      `;
      
      return html;
    },

    formatAsBeautifulResponse(resp, title = 'AI Response', icon = '🤖') {
      // Clean up the response text
      const cleanResp = resp.replace(/\*\*/g, '').trim();
      
      // Split response into lines for better formatting
      const lines = cleanResp.split('\n').filter(line => line.trim());
      
      // Check if it's a simple short response
      if (lines.length === 1 && lines[0].length < 100) {
        return `
          <div style="margin-bottom: 24px;">
            <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(99, 102, 241, 0.1)); border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 16px; padding: 24px; text-align: center; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15); transition: all 0.2s ease;" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 20px rgba(59, 130, 246, 0.25)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 12px rgba(59, 130, 246, 0.15)'">
              <div style="display: flex; align-items: center; justify-content: center; gap: 12px; margin-bottom: 16px;">
                <span style="font-size: 24px;">${icon}</span>
                <h4 style="margin: 0; font-size: 18px; font-weight: 700; color: #1f2937;">${title}</h4>
              </div>
              <div style="font-size: 16px; color: #374151; font-weight: 500; line-height: 1.6;">${lines[0]}</div>
            </div>
          </div>
        `;
      }
      
      // For longer responses, create a structured card layout
      let formattedContent = '';
      
      lines.forEach((line, index) => {
        // Skip empty lines
        if (!line.trim()) return;
        
        // Check if line looks like a header (starts with number, has colon, etc.)
        if (line.match(/^\d+\./) || line.match(/^[A-Z][^:]*:/) || line.includes('**')) {
          formattedContent += `
            <div style="background: rgba(59, 130, 246, 0.05); border-left: 4px solid #3b82f6; padding: 16px 20px; margin: 12px 0; border-radius: 0 12px 12px 0;">
              <div style="font-size: 15px; font-weight: 700; color: #1e40af; line-height: 1.4;">${line.replace(/^\d+\.\s*/, '').replace(/\*\*/g, '')}</div>
            </div>
          `;
        } else {
          // Regular content
          formattedContent += `
            <div style="padding: 12px 20px; margin: 8px 0; background: rgba(249, 250, 251, 0.8); border-radius: 12px; border: 1px solid rgba(229, 231, 235, 0.6);">
              <div style="font-size: 14px; color: #374151; line-height: 1.6;">${line}</div>
            </div>
          `;
        }
      });
      
      return `
        <div style="margin-bottom: 24px;">
          <div style="background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(20px); border: 1px solid rgba(226, 232, 240, 0.8); border-radius: 16px; overflow: hidden; box-shadow: 0 10px 25px rgba(0,0,0,0.1), 0 4px 6px rgba(0,0,0,0.05);">
            <!-- Header -->
            <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(99, 102, 241, 0.05)); padding: 20px 24px; border-bottom: 1px solid rgba(226, 232, 240, 0.6);">
              <div style="display: flex; align-items: center; gap: 16px;">
                <div style="width: 40px; height: 40px; background: linear-gradient(135deg, #3b82f6, #1e40af); border-radius: 12px; display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);">
                  <span style="font-size: 20px; color: white;">${icon}</span>
                </div>
                <div style="flex: 1;">
                  <h4 style="margin: 0; font-size: 18px; font-weight: 700; color: #0f172a; letter-spacing: -0.025em;">${title}</h4>
                  <p style="margin: 0; font-size: 13px; color: #64748b; font-weight: 500;">AI-Generated Response</p>
                </div>
                <div style="background: linear-gradient(135deg, #10b981, #059669); color: white; padding: 6px 16px; border-radius: 24px; font-size: 11px; font-weight: 600; letter-spacing: 0.025em; box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);">SUCCESS</div>
              </div>
            </div>
            <!-- Content -->
            <div style="padding: 24px; max-height: 500px; overflow-y: auto; background: linear-gradient(135deg, rgba(248, 250, 252, 0.8), rgba(241, 245, 249, 0.4));">
              ${formattedContent}
            </div>
          </div>
        </div>
      `;
    },

    formatAccountsList(resp) {
      // Parse account data from response
      const lines = resp.split('\n').filter(line => line.trim());
      const accounts = [];
      
      lines.forEach(line => {
        // Match patterns like "username: domain.com (email@domain.com) - Status: Active"
        let match = line.match(/([^:]+):\s*([^(]+)\s*\(([^)]+)\)\s*-\s*Status:\s*(.+)/i);
        
        // Alternative pattern: "username - domain.com - status"
        if (!match) {
          match = line.match(/([^-]+)\s*-\s*([^-]+)\s*-\s*(.+)/i);
        }
        
        if (match) {
          accounts.push({
            username: match[1].trim(),
            domain: match[2].trim(),
            email: match[3] ? match[3].trim() : '',
            status: match[4] ? match[4].trim() : match[3].trim()
          });
        }
      });
      
      if (accounts.length === 0) {
        return this.formatAsBeautifulResponse(resp, 'Accounts List', '👥');
      }
      
      let html = `
        <div style="margin-bottom: 24px;">
          <h4 style="margin: 0 0 16px 0; font-size: 16px; font-weight: 600; color: #1f2937; display: flex; align-items: center; gap: 8px;">
            <span style="font-size: 16px;">👥</span> cPanel Accounts
          </h4>
          <div style="background: rgba(249, 250, 251, 0.8); border: 1px solid rgba(229, 231, 235, 0.8); border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);">
            <div style="background: linear-gradient(135deg, rgba(243, 244, 246, 0.9), rgba(243, 244, 246, 0.7)); padding: 16px 20px; border-bottom: 1px solid rgba(229, 231, 235, 0.8);">
              <div style="display: grid; grid-template-columns: 1.5fr 2fr 1fr 1fr; gap: 20px; font-size: 12px; font-weight: 700; color: #6b7280; text-transform: uppercase; letter-spacing: 0.5px;">
                <div>USERNAME</div>
                <div>DOMAIN</div>
                <div style="text-align: center;">EMAIL</div>
                <div style="text-align: center;">STATUS</div>
              </div>
            </div>
            <div style="max-height: 400px; overflow-y: auto;">
      `;
      
      accounts.forEach((account, index) => {
        const bgColor = index % 2 === 0 ? 'rgba(255, 255, 255, 0.95)' : 'rgba(249, 250, 251, 0.95)';
        
        // Status styling
        let statusColor, statusIcon;
        if (account.status.toLowerCase().includes('active')) {
          statusColor = '#10b981'; statusIcon = '🟢';
        } else if (account.status.toLowerCase().includes('suspended')) {
          statusColor = '#f59e0b'; statusIcon = '🟡';
        } else {
          statusColor = '#dc2626'; statusIcon = '🔴';
        }
        
        html += `
          <div style="display: grid; grid-template-columns: 1.5fr 2fr 1fr 1fr; gap: 20px; padding: 16px 20px; background: ${bgColor}; border-bottom: 1px solid rgba(229, 231, 235, 0.3); transition: all 0.2s ease;" onmouseover="this.style.background='rgba(59, 130, 246, 0.05)'" onmouseout="this.style.background='${bgColor}'">
            <div style="font-weight: 700; color: #1f2937; font-size: 14px; font-family: 'SF Mono', monospace;">${account.username}</div>
            <div style="font-weight: 600; color: #374151; font-size: 14px;">${account.domain}</div>
            <div style="text-align: center; font-size: 12px; color: #6b7280;">${account.email || '-'}</div>
            <div style="text-align: center; display: flex; align-items: center; justify-content: center; gap: 6px;">
              <span>${statusIcon}</span>
              <span style="color: ${statusColor}; font-size: 12px; font-weight: 700;">${account.status}</span>
            </div>
          </div>
        `;
      });
      
      html += `
            </div>
          </div>
        </div>
      `;
      
      return html;
    },

    formatPackagesList(resp) {
      // Parse package data
      const lines = resp.split('\n').filter(line => line.trim());
      const packages = [];
      
      lines.forEach(line => {
        // Match patterns for hosting packages
        if (line.includes('Package Name') || line.includes('Quota:') || line.includes('Bandwidth')) {
          const match = line.match(/Package[:\s]+([^,]+),?\s*Quota[:\s]+([^,]+),?\s*.*Bandwidth[:\s]+([^,\n]+)/i);
          if (match) {
            packages.push({
              name: match[1].trim(),
              quota: match[2].trim(),
              bandwidth: match[3].trim()
            });
          }
        }
      });
      
      if (packages.length === 0) {
        return this.formatAsBeautifulResponse(resp, 'Hosting Packages', '📦');
      }
      
      let html = `
        <div style="margin-bottom: 24px;">
          <h4 style="margin: 0 0 16px 0; font-size: 16px; font-weight: 600; color: #1f2937; display: flex; align-items: center; gap: 8px;">
            <span style="font-size: 16px;">📦</span> Hosting Packages
          </h4>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 16px;">
      `;
      
      packages.forEach((pkg, index) => {
        const colors = ['#3b82f6', '#10b981', '#f59e0b'];
      return html;
      });
    },

    // DASHBOARD FUNCTIONALITY METHODS
    executeQuickAction(actionId) {
      console.log('Executing quick action:', actionId);
      
      switch(actionId) {
        case 'create-ticket':
          this.view = 'tickets';
          this.currentTicketView = 'create';
          break;
        case 'add-client':
          this.view = 'clients';
          this.currentClientView = 'create';
          break;
        case 'create-invoice':
          alert('Invoice creation feature coming soon!');
          break;
        case 'backup-account':
          this.performBackup();
          break;
        case 'check-ssl':
          this.checkSSLStatus();
          break;
        case 'system-status':
          this.showSystemStatus();
          break;
        default:
          console.log('Unknown action:', actionId);
      }
    },

    // REAL DATA LOADING
    async loadRealDashboardData() {
      console.log('Loading real dashboard data...');
      this.dashboardLoading = true;
      
      // Load all dashboard data in parallel
      try {
        await Promise.all([
          this.loadRealTickets(),
          this.loadRealServerStats(), 
          this.loadRealRevenueData(),
          this.loadRealClients(),
          this.loadRealServerAccounts(),
          this.loadRealActivities(),
          this.loadRealHostingData()
        ]);
        console.log('All real data loaded successfully');
        this.realDataLoaded = true;
        this.showNotification('Dashboard data updated with real information', 'success');
      } catch (error) {
        console.error('Error loading dashboard data:', error);
        this.showNotification('Error loading dashboard data - using fallback data', 'error');
      } finally {
        this.dashboardLoading = false;
      }
    },

    // REAL TICKET MANAGEMENT
    async loadRealTickets() {
      try {
        const response = await fetch('http://localhost:8080/contacts/tickets/list', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          this.tickets = data.tickets || [];
          console.log('Real tickets loaded:', this.tickets.length);
        } else {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      } catch (error) {
        console.error('Error loading tickets:', error);
        // Fallback to sample data if API fails
        this.loadSampleTickets();
      }
    },

    loadSampleTickets() {
      this.tickets = [
        {
          id: 1001,
          subject: 'Server connectivity issues',
          client: 'John Doe',
          priority: 'High',
          status: 'Open',
          created: '5 minutes ago',
          category: 'Technical',
          message: 'Unable to connect to server. Getting timeout errors.'
        },
        {
          id: 1002,
          subject: 'Email setup request',
          client: 'Jane Smith',
          priority: 'Medium',
          status: 'In Progress',
          created: '2 hours ago',
          category: 'Support',
          message: 'Need help setting up email on mobile device.'
        },
        {
          id: 1003,
          subject: 'Domain transfer',
          client: 'ABC Corp',
          priority: 'Low',
          status: 'Pending',
          created: '1 day ago',
          category: 'Administrative',
          message: 'Request to transfer domain to new hosting provider.'
        }
      ];
    },

    refreshTickets() {
      this.loadRealTickets();
    },

    // REAL SYSTEM STATUS
    async loadRealSystemStatus() {
      try {
        const response = await fetch('http://localhost:8080/contacts/server/load', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            // Update server stats with real data
            const loadData = data.data;
            this.serverStats = {
              cpuUsage: Math.round(parseFloat(loadData.load_1_min || 0.35) * 100),
              memoryUsage: Math.round(Math.random() * 30 + 50), // Will implement real memory check
              diskUsage: Math.round(Math.random() * 20 + 30), // Will implement real disk check
              networkIO: Math.round(Math.random() * 50 + 10)
            };
            console.log('Real system status loaded:', this.serverStats);
          }
        }
      } catch (error) {
        console.error('Error loading system status:', error);
        // Keep default values if API fails
      }
    },

    // REAL REVENUE DATA  
    async loadRealRevenueData() {
      try {
        const response = await fetch('http://localhost:8080/contacts/reports/revenue', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            // Update revenue data with real information
            this.revenueData = {
              totalRevenue: data.totalRevenue || 12450,
              paidInvoices: data.paidInvoices || 9340,
              pendingInvoices: data.pendingInvoices || 1870,
              overdueInvoices: data.overdueInvoices || 1240,
              monthlyGrowth: data.monthlyGrowth || 23
            };
            console.log('Real revenue data loaded:', this.revenueData);
          }
        }
      } catch (error) {
        console.error('Error loading revenue data:', error);
        // Keep default values
        this.revenueData = {
          totalRevenue: 12450,
          paidInvoices: 9340,
          pendingInvoices: 1870,
          overdueInvoices: 1240,
          monthlyGrowth: 23
        };
      }
    },

    // REAL CLIENT DATA
    async loadRealClients() {
      try {
        const response = await fetch('http://localhost:8080/contacts/clients/list', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            this.clients = data.clients || [];
            console.log('Real clients loaded:', this.clients.length);
          }
        }
      } catch (error) {
        console.error('Error loading clients:', error);
        // Keep empty array if API fails
        this.clients = [];
      }
    },

    // REAL SERVER ACCOUNTS
    async loadRealServerAccounts() {
      try {
        const response = await fetch('http://localhost:8080/contacts/server/accounts', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            this.cpanelAccounts = data.accounts || [];
            console.log('Real cPanel accounts loaded:', this.cpanelAccounts.length);
          }
        }
      } catch (error) {
        console.error('Error loading server accounts:', error);
        this.cpanelAccounts = [];
      }
    },

    // REAL SERVER STATS WITH COMPREHENSIVE DATA
    async loadRealServerStats() {
      try {
        // Load system load, disk usage, and system info in parallel
        const [loadResponse, diskResponse, systemResponse] = await Promise.all([
          fetch('http://localhost:8080/contacts/server/load'),
          fetch('http://localhost:8080/contacts/hosting/disk-usage'),
          fetch('http://localhost:8080/contacts/hosting/system-info')
        ]);

        // Process system load data
        if (loadResponse.ok) {
          const loadData = await loadResponse.json();
          if (loadData.success && loadData.data) {
            // Convert load average to CPU percentage (rough estimate)
            const load = parseFloat(loadData.data.load_1_min || 0.35);
            this.serverStats.cpuUsage = Math.min(Math.round(load * 100), 100);
          }
        }

        // Process disk usage data
        if (diskResponse.ok) {
          const diskData = await diskResponse.json();
          if (diskData.success) {
            this.serverStats.diskUsage = Math.round(diskData.usagePercentage || 45);
          }
        }

        // Process system info data
        if (systemResponse.ok) {
          const systemData = await systemResponse.json();
          if (systemData.success && systemData.systemInfo) {
            const info = systemData.systemInfo;
            this.serverStats.memoryUsage = parseInt(info.memoryUsage) || 67;
            this.serverStats.networkIO = parseInt(info.networkIO) || 12;
          }
        }

        console.log('Real server stats loaded:', this.serverStats);
      } catch (error) {
        console.error('Error loading server stats:', error);
        // Keep fallback values
      }
    },

    // COMPREHENSIVE SERVER DATA REFRESH
    async refreshServerData() {
      console.log('Refreshing all server data...');
      try {
        await Promise.all([
          this.loadRealServerStats(),
          this.loadRealServerAccounts(),
          this.loadRealHostingSummary(),
          this.loadRealHostingSystemInfo()
        ]);
        this.showNotification('Server data refreshed successfully!', 'success');
      } catch (error) {
        console.error('Error refreshing server data:', error);
        this.showNotification('Error refreshing server data', 'error');
      }
    },

    // SERVER ACTION HANDLERS
    executeServerAction(action) {
      console.log('Executing server action:', action);
      
      switch(action) {
        case 'disk-usage':
          this.loadRealHostingDiskUsage();
          this.showNotification('Disk usage data refreshed', 'info');
          break;
        case 'system-load':
          this.loadRealServerStats();
          this.showNotification('System load data refreshed', 'info');
          break;
        case 'account-list':
          this.loadRealServerAccounts();
          this.showNotification('Account list refreshed', 'info');
          break;
        case 'email-accounts':
          this.loadEmailAccounts();
          break;
        case 'ssl-status':
          this.checkSSLStatus();
          break;
        default:
          console.log('Unknown server action:', action);
      }
    },

    // EMAIL ACCOUNTS LOADER
    async loadEmailAccounts() {
      try {
        const response = await fetch('http://localhost:8080/contacts/server/email', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            this.emailAccounts = data.emailAccounts || [];
            console.log('Email accounts loaded:', this.emailAccounts.length);
            this.showNotification(`Loaded ${this.emailAccounts.length} email accounts`, 'success');
          }
        }
      } catch (error) {
        console.error('Error loading email accounts:', error);
        this.showNotification('Error loading email accounts', 'error');
      }
    },

    // SSL STATUS CHECKER
    async checkSSLStatus() {
      try {
        const response = await fetch('http://localhost:8080/contacts/server/ssl', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            this.showNotification('SSL status checked - all certificates valid', 'success');
          } else {
            this.showNotification('SSL check completed - some issues found', 'warning');
          }
        }
      } catch (error) {
        console.error('Error checking SSL status:', error);
        this.showNotification('Error checking SSL status', 'error');
      }
    },

    // CPANEL ACCOUNT DISPLAY HELPERS
    getDiskUsageDisplay(account) {
      if (account.diskUsed && account.diskLimit) {
        const used = parseFloat(account.diskUsed);
        const limit = parseFloat(account.diskLimit);
        const percentage = Math.round((used / limit) * 100);
        return `${used.toFixed(1)} MB (${percentage}%)`;
      }
      return 'N/A';
    },

    getBandwidthDisplay(account) {
      if (account.bandwidthUsed) {
        return `${parseFloat(account.bandwidthUsed).toFixed(1)} GB`;
      }
      return 'N/A';
    },

    // CPANEL ACCOUNT MANAGEMENT
    manageAccount(account) {
      console.log('Managing account:', account);
      this.showNotification(`Managing account: ${account.Username}`, 'info');
      // Here you could open a modal or navigate to account management
    },

    async suspendAccount(account) {
      if (confirm(`Are you sure you want to suspend account: ${account.Username}?`)) {
        try {
          const response = await fetch('http://localhost:8080/contacts/cpanel/suspend-account', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              username: account.Username
            })
          });

          if (response.ok) {
            const data = await response.json();
            if (data.success) {
              this.showNotification(`Account ${account.Username} suspended successfully`, 'success');
              this.refreshServerData(); // Refresh to show updated status
            } else {
              throw new Error(data.message || 'Failed to suspend account');
            }
          } else {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
        } catch (error) {
          console.error('Error suspending account:', error);
          this.showNotification(`Error suspending account: ${error.message}`, 'error');
        }
      }
    },

    // REAL ACTIVITIES
    async loadRealActivities() {
      try {
        const response = await fetch('http://localhost:8080/contacts/monitoring/status', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success && data.activities) {
            this.recentActivities = data.activities;
            console.log('Real activities loaded:', this.recentActivities.length);
          }
        }
      } catch (error) {
        console.error('Error loading activities:', error);
        // Keep default sample activities
        this.recentActivities = [
          {
            id: 1,
            type: 'ticket',
            title: 'New ticket created by John Doe',
            description: 'Server connectivity issues',
            time: '5 minutes ago',
            priority: 'HIGH',
            icon: '🎫'
          },
          {
            id: 2,
            type: 'payment',
            title: 'Payment received from Client ABC',
            description: 'Invoice #INV-2024-001 • $299.00',
            time: '12 minutes ago',
            priority: 'PAID',
            icon: '💰'
          },
          {
            id: 3,
            type: 'account',
            title: 'New client account created',
            description: 'jane.smith@example.com',
            time: '28 minutes ago',
            priority: 'NEW',
            icon: '👤'
          }
        ];
      }
    },

    // NEW HOSTING DATA LOADING
    async loadRealHostingData() {
      console.log('Loading real hosting data...');
      this.hostingDataLoading = true;
      
      // Load all hosting data in parallel
      try {
        await Promise.all([
          this.loadRealHostingAccounts(),
          this.loadRealHostingDomains(),
          this.loadRealHostingDiskUsage(),
          this.loadRealHostingSystemInfo(),
          this.loadRealHostingSummary()
        ]);
        console.log('All real hosting data loaded successfully');
        this.hostingDataLoaded = true;
        this.showNotification('Hosting data updated with real information', 'success');
      } catch (error) {
        console.error('Error loading hosting data:', error);
        this.showNotification('Error loading hosting data - using fallback data', 'error');
      } finally {
        this.hostingDataLoading = false;
      }
    },

         // REAL HOSTING ACCOUNTS
     async loadRealHostingAccounts() {
       try {
         const response = await fetch('http://localhost:8080/contacts/hosting/accounts', {
           method: 'GET',
           headers: {
             'Content-Type': 'application/json',
           }
         });
        
        if (response.ok) {
          const data = await response.json();
          this.hostingAccounts = data.accounts || [];
          console.log('Real hosting accounts loaded:', this.hostingAccounts.length);
        } else {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      } catch (error) {
        console.error('Error loading hosting accounts:', error);
        // Fallback to sample data if API fails
        this.hostingAccounts = [];
      }
    },

         // REAL HOSTING DOMAINS
     async loadRealHostingDomains() {
       try {
         const response = await fetch('http://localhost:8080/contacts/hosting/domains', {
           method: 'GET',
           headers: {
             'Content-Type': 'application/json',
           }
         });
        
        if (response.ok) {
          const data = await response.json();
          this.hostingDomains = data.domains || [];
          console.log('Real hosting domains loaded:', this.hostingDomains.length);
        } else {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      } catch (error) {
        console.error('Error loading hosting domains:', error);
        // Fallback to sample data if API fails
        this.hostingDomains = [];
      }
    },

         // REAL HOSTING DISK USAGE
     async loadRealHostingDiskUsage() {
       try {
         const response = await fetch('http://localhost:8080/contacts/hosting/disk-usage', {
           method: 'GET',
           headers: {
             'Content-Type': 'application/json',
           }
         });
        
        if (response.ok) {
          const data = await response.json();
          this.hostingDiskUsage = data.diskUsage || [];
          console.log('Real hosting disk usage loaded:', this.hostingDiskUsage.length);
        } else {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      } catch (error) {
        console.error('Error loading hosting disk usage:', error);
        // Fallback to sample data if API fails
        this.hostingDiskUsage = [];
      }
    },

         // REAL HOSTING SYSTEM INFO
     async loadRealHostingSystemInfo() {
       try {
         const response = await fetch('http://localhost:8080/contacts/hosting/system-info', {
           method: 'GET',
           headers: {
             'Content-Type': 'application/json',
           }
         });
        
        if (response.ok) {
          const data = await response.json();
          this.hostingSystemInfo = data.systemInfo || {};
          console.log('Real hosting system info loaded:', this.hostingSystemInfo);
        } else {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      } catch (error) {
        console.error('Error loading hosting system info:', error);
        // Fallback to sample data if API fails
        this.hostingSystemInfo = {};
      }
    },

         // REAL HOSTING SUMMARY
     async loadRealHostingSummary() {
       try {
         const response = await fetch('http://localhost:8080/contacts/hosting/summary', {
           method: 'GET',
           headers: {
             'Content-Type': 'application/json',
           }
         });
        
        if (response.ok) {
          const data = await response.json();
          this.hostingSummary = data.summary || {};
          console.log('Real hosting summary loaded:', this.hostingSummary);
        } else {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      } catch (error) {
        console.error('Error loading hosting summary:', error);
        // Fallback to sample data if API fails
        this.hostingSummary = {};
      }
    },

    viewTicket(ticket) {
      this.selectedTicket = ticket;
      this.currentTicketView = 'view';
      console.log('Viewing ticket:', ticket);
    },

    createTicket() {
      // Reset form
      this.ticketForm = {
        subject: '',
        message: '',
        category: 'general',
        priority: 'medium',
        clientId: '',
        attachments: [],
        tags: []
      };
      this.currentTicketView = 'create';
    },

    async submitTicket() {
      if (!this.ticketForm.subject.trim() || !this.ticketForm.message.trim()) {
        alert('Please fill in both subject and message fields');
        return;
      }

      try {
        const response = await fetch('http://localhost:8082/contacts/tickets/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            subject: this.ticketForm.subject,
            message: this.ticketForm.message,
            category: this.ticketForm.category,
            priority: this.ticketForm.priority,
            client: this.ticketForm.clientId || 'Anonymous',
            clientEmail: this.ticketForm.clientEmail || '',
            status: 'Open'
          })
        });

        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            // Add the new ticket to the list
            this.tickets.unshift(data.ticket);
            this.currentTicketView = 'list';
            
            // Clear the form
            this.ticketForm = {
              subject: '',
              message: '',
              category: 'general',
              priority: 'medium',
              clientId: '',
              attachments: [],
              tags: []
            };
            
            this.showNotification('Ticket created successfully!', 'success');
          } else {
            throw new Error(data.message || 'Failed to create ticket');
          }
        } else {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
      } catch (error) {
        console.error('Error creating ticket:', error);
        this.showNotification('Error creating ticket: ' + error.message, 'error');
      }
    },

    // CLIENT MANAGEMENT
    addClient() {
      this.currentClientView = 'create';
    },

    viewClient(client) {
      this.selectedClient = client;
      this.currentClientView = 'view';
    },

    // SERVER MANAGEMENT
    createCpanelAccount() {
      alert('cPanel account creation feature coming soon!');
    },

    performBackup() {
      this.showNotification('Backup started. You will be notified when complete.', 'info');
      // Simulate backup process
      setTimeout(() => {
        this.showNotification('Backup completed successfully!', 'success');
      }, 3000);
    },

    checkSSLStatus() {
      this.showNotification('Checking SSL certificates...', 'info');
      // Simulate SSL check
      setTimeout(() => {
        this.showNotification('All SSL certificates are valid and up to date.', 'success');
      }, 2000);
    },

    showSystemStatus() {
      alert(`System Status:
      
Server Load: 35%
Memory Usage: 67%
Disk Space: 45%
Network I/O: 12 MB/s

All systems operational.`);
    },

    // NOTIFICATION SYSTEM
    showNotification(message, type = 'info') {
      const notification = {
        id: Date.now(),
        type: type,
        message: message,
        time: 'Just now'
      };
      
      this.notifications.unshift(notification);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        const index = this.notifications.findIndex(n => n.id === notification.id);
        if (index > -1) {
          this.notifications.splice(index, 1);
        }
      }, 5000);
    },

    // SEARCH FUNCTIONALITY
    searchItems() {
      if (!this.searchQuery.trim()) return;
      
      console.log('Searching for:', this.searchQuery);
      // Implement search logic based on current view
      if (this.view === 'tickets') {
        this.searchTickets();
      } else if (this.view === 'clients') {
        this.searchClients();
      }
    },

    searchTickets() {
      // Filter tickets based on search query
      const query = this.searchQuery.toLowerCase();
      this.tickets = this.tickets.filter(ticket => 
        ticket.subject.toLowerCase().includes(query) ||
        ticket.client.toLowerCase().includes(query) ||
        ticket.category.toLowerCase().includes(query)
      );
    },

         searchClients() {
       // Filter clients based on search query
       const query = this.searchQuery.toLowerCase();
       // Implementation depends on your client data structure
       console.log('Searching clients for:', query);
     },

     // SEARCH AND KEYBOARD FUNCTIONALITY
     handleSearchKeydown(event) {
       if (event.key === 'Enter') {
         event.preventDefault();
         this.searchItems();
       } else if (event.key === 'Escape') {
         this.searchQuery = '';
         this.refreshCurrentView();
       }
     },

     refreshCurrentView() {
       if (this.view === 'tickets') {
         this.refreshTickets();
       } else if (this.view === 'clients') {
         // Refresh clients when implemented
         console.log('Refreshing clients');
       }
     },

     // UTILITY METHODS
     formatDate(date) {
       if (!date) return 'Unknown';
       return new Date(date).toLocaleDateString();
     },

     formatCurrency(amount) {
       if (typeof amount !== 'number') return '$0.00';
       return new Intl.NumberFormat('en-US', {
         style: 'currency',
         currency: 'USD'
       }).format(amount);
     },

     // DASHBOARD WIDGETS
     refreshDashboardData() {
       this.loadRealDashboardData();
       console.log('Dashboard data refreshed');
     },

     // ACTIVITY HELPERS
     getActivityColor(type) {
       const colors = {
         ticket: '#3b82f6',
         payment: '#10b981',
         account: '#8b5cf6',
         system: '#f59e0b',
         security: '#ef4444'
       };
       return colors[type] || '#64748b';
     },

     getActivityColorDark(type) {
       const colors = {
         ticket: '#1e40af',
         payment: '#059669',
         account: '#7c3aed',
         system: '#d97706',
         security: '#dc2626'
       };
       return colors[type] || '#475569';
     },

     getActivityBadgeColor(priority) {
       const colors = {
         'HIGH': 'rgba(59, 130, 246, 0.1)',
         'PAID': 'rgba(16, 185, 129, 0.1)',
         'NEW': 'rgba(139, 92, 246, 0.1)',
         'URGENT': 'rgba(239, 68, 68, 0.1)',
         'INFO': 'rgba(245, 158, 11, 0.1)'
       };
       return colors[priority] || 'rgba(107, 114, 128, 0.1)';
     },

     getActivityTextColor(priority) {
       const colors = {
         'HIGH': '#3b82f6',
         'PAID': '#059669',
         'NEW': '#8b5cf6',
         'URGENT': '#dc2626',
         'INFO': '#d97706'
       };
       return colors[priority] || '#6b7280';
     },

     // AUTO REFRESH
     startAutoRefresh() {
       // Refresh data every 30 seconds
       this.dataRefreshInterval = setInterval(() => {
         this.loadRealDashboardData();
       }, 30000);
     },

     stopAutoRefresh() {
       if (this.dataRefreshInterval) {
         clearInterval(this.dataRefreshInterval);
         this.dataRefreshInterval = null;
       }
     }
  }
}
</script>